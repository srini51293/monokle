{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Monokle Welcome to Monokle - your friendly desktop UI for managing k8s manifests! Monokle helps you to: Quickly get a high-level view of your manifests, their contained resources and relationships. Easily edit resources without having to learn or look up yaml syntax. Refactor resources with maintained integrity of names and references. Preview and debug resources generated with Kustomize or Helm. Diff resources against your cluster and apply changes immediately. Visualize and navigate resources in your clusters. And much more! For further details on working with Monokle, read the Feature Overview document or watch the YouTube Monokle Walkthrough Video . Blog-posts Check out the following blog-posts with Monokle-related content: 1.8.0 - Release blog-post - June 6, 2022 1.7.0 - Release blog-post - May 2, 2022 1.6.0 - Release blog-post - Mar 21, 2022 1.5.0 - Release blog-post - Feb 7, 2022 1.4.0 - Release blog-post - Dec 15, 2021 1.3.0 - Release blog-post - Nov 15, 2021 1.2.0 - Release blog-post - Oct 4, 2021 1.1.0 - Release blog-post - Sep 6, 2021 1.0.0 - Initial release blog-post - Aug 10, 2021","title":"Welcome"},{"location":"#monokle","text":"Welcome to Monokle - your friendly desktop UI for managing k8s manifests! Monokle helps you to: Quickly get a high-level view of your manifests, their contained resources and relationships. Easily edit resources without having to learn or look up yaml syntax. Refactor resources with maintained integrity of names and references. Preview and debug resources generated with Kustomize or Helm. Diff resources against your cluster and apply changes immediately. Visualize and navigate resources in your clusters. And much more! For further details on working with Monokle, read the Feature Overview document or watch the YouTube Monokle Walkthrough Video .","title":"Monokle"},{"location":"#blog-posts","text":"Check out the following blog-posts with Monokle-related content: 1.8.0 - Release blog-post - June 6, 2022 1.7.0 - Release blog-post - May 2, 2022 1.6.0 - Release blog-post - Mar 21, 2022 1.5.0 - Release blog-post - Feb 7, 2022 1.4.0 - Release blog-post - Dec 15, 2021 1.3.0 - Release blog-post - Nov 15, 2021 1.2.0 - Release blog-post - Oct 4, 2021 1.1.0 - Release blog-post - Sep 6, 2021 1.0.0 - Initial release blog-post - Aug 10, 2021","title":"Blog-posts"},{"location":"apply-and-diff/","text":"Deploying and Diffing Resources When a resource is selected in the navigator, the Editor contains Deploy and Diff buttons in the top right. Selecting Deploy will deploy the selected resource to the currently configured Cluster. A status message will be shown in the top right after deploying. Selecting Diff will diff the selected resource against the currently configured cluster; If the resource does not exist in the cluster, an error will be shown. If the resource does exist, the Diff dialog will be shown. In this screenshot The left side shows the resource in Monokle. The right side shows the resource retrieved from the cluster. Differences are highlighted as shown. Refreshing the diff is done with the Refresh button and deploying your local version of the resource to your cluster is done with Deploy . Editing a Resource in Cluster Mode Monokle allows you to edit any resource viewed in Cluster Mode and use the Deploy button to apply those changes back to the cluster. This immediately applies \"hot fixes\" to your cluster during browsing. Deploy Resource Changes to Cluster After editing a resource in Monokle, click the Diff button: The following modal appears for selecting the namesapce for deployment: Select an existing namespace from the cluster, create a new namespace, or don't specify a namespace, which will deploy into namespaces already declared in the resource.","title":"Deploy/Diff"},{"location":"apply-and-diff/#deploying-and-diffing-resources","text":"When a resource is selected in the navigator, the Editor contains Deploy and Diff buttons in the top right. Selecting Deploy will deploy the selected resource to the currently configured Cluster. A status message will be shown in the top right after deploying. Selecting Diff will diff the selected resource against the currently configured cluster; If the resource does not exist in the cluster, an error will be shown. If the resource does exist, the Diff dialog will be shown. In this screenshot The left side shows the resource in Monokle. The right side shows the resource retrieved from the cluster. Differences are highlighted as shown. Refreshing the diff is done with the Refresh button and deploying your local version of the resource to your cluster is done with Deploy .","title":"Deploying and Diffing Resources"},{"location":"apply-and-diff/#editing-a-resource-in-cluster-mode","text":"Monokle allows you to edit any resource viewed in Cluster Mode and use the Deploy button to apply those changes back to the cluster. This immediately applies \"hot fixes\" to your cluster during browsing.","title":"Editing a Resource in Cluster Mode"},{"location":"apply-and-diff/#deploy-resource-changes-to-cluster","text":"After editing a resource in Monokle, click the Diff button: The following modal appears for selecting the namesapce for deployment: Select an existing namespace from the cluster, create a new namespace, or don't specify a namespace, which will deploy into namespaces already declared in the resource.","title":"Deploy Resource Changes to Cluster"},{"location":"architecture/","text":"Monokle Architecture Monokle is an Electron desktop application built with React & TypeScript. Redux Toolkit is used for state management. Visuals are done using Ant Design. Other fairly common libraries/frameworks are used internally for common functionality (see components below). This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder , which provides: - TypeScript support for Electron main process source code. - Hot-relaod support for Electron app. - Electron-builder support. See https://www.electron.build/ for more info on Electron-builder. Folder Structure /electron : Electron main thread - contains startup code and some ipc handlers invoked from the UI. /src : Root for monokle UI application - contains App.tsx, Index.tsx, etc. /components : UI components - coarse to fine grained; organisms -> molecules -> atoms /constants : constants.. /models : type definitions for core objects (see below) and states /redux : redux-related code (selectors, hooks, store, reducers, thunks, services) /styles : styles.. /utils : common utility functions /assets : icons/images/etc Core Objects Most logic revolves around K8sResource objects which \"encapsulate\" all data associated with a parsed resource. FileEntry objects correspond to a parsed file - which can contain 0..n K8s Resource objects. The AppState holds the main state of the application (see inline comments), state changes are handled by the main reducer and corresponding thunks Main UI Components The content of most high level organisms and molecules should be fairly self-explanatory. A few highlights: The FileTreePane renders the selected folder. The NavigatorPane renders the main resource navigator, including sections for Helm Charts and Kustomizations. The Monaco component renders the source editor using the Monaco editor (same as used by VS Code). The FormEditor component renders nice forms for K8sResources using the react-jsonschema-form component (see below), corresponding schemas/uiSchemas are in the resources/form-schemas folder. 3rd Party Components Used https://github.com/eemeli/yaml for yaml parsing. https://github.com/react-monaco-editor/react-monaco-editor for source editing. https://github.com/micromatch/micromatch for dynamic filtering in navigator and file exclusion matching. https://github.com/JSONPath-Plus/JSONPath for finding refs/selectors in resources. https://github.com/rjsf-team/react-jsonschema-form for generating forms for k8s resources. https://github.com/wbkd/react-flow for graph diagrams. https://github.com/tweenjs/es6-tween for animation tweening. https://github.com/pengx17/monaco-yaml for yaml support in the source editor. https://github.com/paulmillr/chokidar for file watching. https://github.com/ant-design/ant-design/ for UI. https://github.com/styled-components/styled-components for custom styling. Dev Dependencies https://github.com/gsoft-inc/craco for overriding CRA config for folder aliases, see https://www.npmjs.com/package/craco-alias#examples. K8s Schemas Monokle currently uses the latest 1.22.1 schemas for validation and editor functionality - see this issue for making schema version configurable. Schemas are currently taken from https://github.com/yannh/kubernetes-json-schema - strict version is used.","title":"Architecture"},{"location":"architecture/#monokle-architecture","text":"Monokle is an Electron desktop application built with React & TypeScript. Redux Toolkit is used for state management. Visuals are done using Ant Design. Other fairly common libraries/frameworks are used internally for common functionality (see components below). This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder , which provides: - TypeScript support for Electron main process source code. - Hot-relaod support for Electron app. - Electron-builder support. See https://www.electron.build/ for more info on Electron-builder.","title":"Monokle Architecture"},{"location":"architecture/#folder-structure","text":"/electron : Electron main thread - contains startup code and some ipc handlers invoked from the UI. /src : Root for monokle UI application - contains App.tsx, Index.tsx, etc. /components : UI components - coarse to fine grained; organisms -> molecules -> atoms /constants : constants.. /models : type definitions for core objects (see below) and states /redux : redux-related code (selectors, hooks, store, reducers, thunks, services) /styles : styles.. /utils : common utility functions /assets : icons/images/etc","title":"Folder Structure"},{"location":"architecture/#core-objects","text":"Most logic revolves around K8sResource objects which \"encapsulate\" all data associated with a parsed resource. FileEntry objects correspond to a parsed file - which can contain 0..n K8s Resource objects. The AppState holds the main state of the application (see inline comments), state changes are handled by the main reducer and corresponding thunks","title":"Core Objects"},{"location":"architecture/#main-ui-components","text":"The content of most high level organisms and molecules should be fairly self-explanatory. A few highlights: The FileTreePane renders the selected folder. The NavigatorPane renders the main resource navigator, including sections for Helm Charts and Kustomizations. The Monaco component renders the source editor using the Monaco editor (same as used by VS Code). The FormEditor component renders nice forms for K8sResources using the react-jsonschema-form component (see below), corresponding schemas/uiSchemas are in the resources/form-schemas folder.","title":"Main UI Components"},{"location":"architecture/#3rd-party-components-used","text":"https://github.com/eemeli/yaml for yaml parsing. https://github.com/react-monaco-editor/react-monaco-editor for source editing. https://github.com/micromatch/micromatch for dynamic filtering in navigator and file exclusion matching. https://github.com/JSONPath-Plus/JSONPath for finding refs/selectors in resources. https://github.com/rjsf-team/react-jsonschema-form for generating forms for k8s resources. https://github.com/wbkd/react-flow for graph diagrams. https://github.com/tweenjs/es6-tween for animation tweening. https://github.com/pengx17/monaco-yaml for yaml support in the source editor. https://github.com/paulmillr/chokidar for file watching. https://github.com/ant-design/ant-design/ for UI. https://github.com/styled-components/styled-components for custom styling.","title":"3rd Party Components Used"},{"location":"architecture/#dev-dependencies","text":"https://github.com/gsoft-inc/craco for overriding CRA config for folder aliases, see https://www.npmjs.com/package/craco-alias#examples.","title":"Dev Dependencies"},{"location":"architecture/#k8s-schemas","text":"Monokle currently uses the latest 1.22.1 schemas for validation and editor functionality - see this issue for making schema version configurable. Schemas are currently taken from https://github.com/yannh/kubernetes-json-schema - strict version is used.","title":"K8s Schemas"},{"location":"cluster-compare/","text":"Cluster Compare The Cluster Compare functionality allows you to compare a set of local resources (vanilla or generated with Helm/Kustomize) to the resources in your clusters: Easily see which of your local resources are different in the cluster. Deploy your local resources to the cluster. Replace your local resources with the ones from the cluster. Compare the resources from Helm chart and Kustomize previews to the cluster resources. To use Cluster Compare follow these steps: Browse to a folder containing manifests / kustomizations / Helm charts. Preview the desired kustomization or helm values file. Select the desired cluster context in the Cluster tab to the left. Press the Cluster Compare button at the top of the Resource Navigator: The Cluster Compare modal opens and shows the local resources on the left and the cluster resources on the right. Tick the Select all check box to deploy all local resources to the cluster or select individual resources via the check box to the left of the resource. Click the Deploy selected local resources (#) to cluster button to complete the deployment. Check out the below short video to see it in action:","title":"Cluster Compare"},{"location":"cluster-compare/#cluster-compare","text":"The Cluster Compare functionality allows you to compare a set of local resources (vanilla or generated with Helm/Kustomize) to the resources in your clusters: Easily see which of your local resources are different in the cluster. Deploy your local resources to the cluster. Replace your local resources with the ones from the cluster. Compare the resources from Helm chart and Kustomize previews to the cluster resources. To use Cluster Compare follow these steps: Browse to a folder containing manifests / kustomizations / Helm charts. Preview the desired kustomization or helm values file. Select the desired cluster context in the Cluster tab to the left. Press the Cluster Compare button at the top of the Resource Navigator: The Cluster Compare modal opens and shows the local resources on the left and the cluster resources on the right. Tick the Select all check box to deploy all local resources to the cluster or select individual resources via the check box to the left of the resource. Click the Deploy selected local resources (#) to cluster button to complete the deployment. Check out the below short video to see it in action:","title":"Cluster Compare"},{"location":"cluster-integration/","text":"Cluster Integration Although Monokle is mainly geared toward working with manifest files, it also has the capability to connect to a cluster and show all contained resources, providing a convenient and easy way to inspect cluster resources. Monokle will automatically detect the default Kubeconfig file or it can be declared in Settings: Using the Cluster Selector Choose a cluster to work with by using the Cluster Selector: If the Cluster Selector does not appear, ensure that the Show Cluster Selector option is checked in the Settings menu: Selecting the Load button will attempt to populate the Resource Navigator with objects from the configured cluster: Monokle is now in Cluster Mode (as indicated by the header at the top): The File Explorer has been disabled if a folder had been previously selected. The Navigator contains all resources retrieved from the configured cluster: Resource navigation works as with files; selecting a resource shows its content in the source editor. Resource links are shown as before with corresponding popups/links/etc. Selecting Exit in the top right restores the contents of the Resource Navigator to the currently selected folder. Working with Multiple Resources In the Navigator, hover over a local resource to display a check box to select one or more resources: Selecting one or more resources brings up the Action Links at the top of the Navigator where the Delete and Deploy options are available: This same functionality is available for cluster resources where the Delete and Save to file/folder are the options:","title":"Cluster Integration"},{"location":"cluster-integration/#cluster-integration","text":"Although Monokle is mainly geared toward working with manifest files, it also has the capability to connect to a cluster and show all contained resources, providing a convenient and easy way to inspect cluster resources. Monokle will automatically detect the default Kubeconfig file or it can be declared in Settings:","title":"Cluster Integration"},{"location":"cluster-integration/#using-the-cluster-selector","text":"Choose a cluster to work with by using the Cluster Selector: If the Cluster Selector does not appear, ensure that the Show Cluster Selector option is checked in the Settings menu: Selecting the Load button will attempt to populate the Resource Navigator with objects from the configured cluster: Monokle is now in Cluster Mode (as indicated by the header at the top): The File Explorer has been disabled if a folder had been previously selected. The Navigator contains all resources retrieved from the configured cluster: Resource navigation works as with files; selecting a resource shows its content in the source editor. Resource links are shown as before with corresponding popups/links/etc. Selecting Exit in the top right restores the contents of the Resource Navigator to the currently selected folder.","title":"Using the Cluster Selector"},{"location":"cluster-integration/#working-with-multiple-resources","text":"In the Navigator, hover over a local resource to display a check box to select one or more resources: Selecting one or more resources brings up the Action Links at the top of the Navigator where the Delete and Deploy options are available: This same functionality is available for cluster resources where the Delete and Save to file/folder are the options:","title":"Working with Multiple Resources"},{"location":"contributing/","text":"Contributing to Monokle If you're interested in contributing to Monokle that's great - we love you! Please follow these steps to get started: Read our Code of Conduct . Fork/clone the Monokle repo and make sure you can build/run Monokle as described in Development . Have a look at the high-level Architecture document to get an overview of Monokles architecture. Either start working on an idea of your own that you would like to contribute - or have a look at the issues on GitHub - focus on those assigned to an upcoming milestone . To help you find a good issue to start with we have labeled easy issues with Good first issue . Once you've found an issue, fork / clone the Monokle repo and start working on it, and let us know by commenting on the issue (so we don't start working on it also). Once you've implemented the issue open a PR back to the Monokle repo so we can review and give you feedback. When all is good we will approve the PR so it can be merged. If you've decided to move on to even greater things without finishing the issue that's fine also (kudos for dedicating some time to an open-source project!), let us know so we can plan accordingly! Always feel free to reach out to us on our Discord Server if you have any questions on any of the above - or anything else Monokle-related. Thank you!","title":"Contributing"},{"location":"contributing/#contributing-to-monokle","text":"If you're interested in contributing to Monokle that's great - we love you! Please follow these steps to get started: Read our Code of Conduct . Fork/clone the Monokle repo and make sure you can build/run Monokle as described in Development . Have a look at the high-level Architecture document to get an overview of Monokles architecture. Either start working on an idea of your own that you would like to contribute - or have a look at the issues on GitHub - focus on those assigned to an upcoming milestone . To help you find a good issue to start with we have labeled easy issues with Good first issue . Once you've found an issue, fork / clone the Monokle repo and start working on it, and let us know by commenting on the issue (so we don't start working on it also). Once you've implemented the issue open a PR back to the Monokle repo so we can review and give you feedback. When all is good we will approve the PR so it can be merged. If you've decided to move on to even greater things without finishing the issue that's fine also (kudos for dedicating some time to an open-source project!), let us know so we can plan accordingly! Always feel free to reach out to us on our Discord Server if you have any questions on any of the above - or anything else Monokle-related. Thank you!","title":"Contributing to Monokle"},{"location":"creating-resources/","text":"Creating Resources Add a Resource While using Monokle, you can directly add new K8s resources. Once you have browsed and added your project folder, click on the New Resource button at the top of the navigator to launch the Add New Resource dialog. For adding resources to new or existing files in the navigator, click on the Save button at the top-right corner of the interface. While creating a resource, it is possible to select an existing resource as a template from the drop-down menu. Create a Resource from a Template Monokle allows the use of templates to start a new project via the Start from a template option: The Create a Project from a Template dialog appears: Name your project, select its location and click Next: Select a Template . Monokle includes a default set of templates which are installed automatically when starting Monokle for the first time and available in the Templates Explorer when working with your Monokle projects: Check out the Monokle Default Templates Plugin repository to see the complete list of templates that are included along with their corresponding schemas and manifests. Navigator Resource Options Click the ellipsis to the right of a resource name to see the options available: Rename a Resource You can rename resources and update all the references associated with that resource to ensure the integrity of that link. Clone a Resource You can use the Clone action to create a new resource by using existing resources as a template. Delete a Resource You can use the Delete action in the cluster mode to delete the resource from the actual cluster.","title":"Creating Resources"},{"location":"creating-resources/#creating-resources","text":"","title":"Creating Resources"},{"location":"creating-resources/#add-a-resource","text":"While using Monokle, you can directly add new K8s resources. Once you have browsed and added your project folder, click on the New Resource button at the top of the navigator to launch the Add New Resource dialog. For adding resources to new or existing files in the navigator, click on the Save button at the top-right corner of the interface. While creating a resource, it is possible to select an existing resource as a template from the drop-down menu.","title":"Add a Resource"},{"location":"creating-resources/#create-a-resource-from-a-template","text":"Monokle allows the use of templates to start a new project via the Start from a template option: The Create a Project from a Template dialog appears: Name your project, select its location and click Next: Select a Template . Monokle includes a default set of templates which are installed automatically when starting Monokle for the first time and available in the Templates Explorer when working with your Monokle projects: Check out the Monokle Default Templates Plugin repository to see the complete list of templates that are included along with their corresponding schemas and manifests.","title":"Create a Resource from a Template"},{"location":"creating-resources/#navigator-resource-options","text":"Click the ellipsis to the right of a resource name to see the options available:","title":"Navigator Resource Options"},{"location":"creating-resources/#rename-a-resource","text":"You can rename resources and update all the references associated with that resource to ensure the integrity of that link.","title":"Rename a Resource"},{"location":"creating-resources/#clone-a-resource","text":"You can use the Clone action to create a new resource by using existing resources as a template.","title":"Clone a Resource"},{"location":"creating-resources/#delete-a-resource","text":"You can use the Delete action in the cluster mode to delete the resource from the actual cluster.","title":"Delete a Resource"},{"location":"development/","text":"Development Monokle is an Electron desktop application built with React & TypeScript. This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder , which provides: TypeScript support for Electron main process source code. Hot-reload support for Electron app. Electron-builder support. Check out the Architecture document for more information. Building & Running Prerequisites Download & Install Git . OSX and Linux machines typically have this already installed. Download & Install Node.js and the npm package manager. Clone this repository. Make sure you are running the node version specified in .npmrc or if you are using nvm , you can run the nvm install command to quickly install and use the required node version. Running Install npm dependencies: npm install Start the application: npm run electron:dev Hot Reloading The Electron app will reload if you make edits in the electron directory. You will also see any lint errors in the console. Building Build the Electron app package for production: npm run electron:build The output will be located in the dist folder. Help & Support Feel free to reach out and ask questions on our Discord server .","title":"Development"},{"location":"development/#development","text":"Monokle is an Electron desktop application built with React & TypeScript. This project was bootstrapped from https://github.com/yhirose/react-typescript-electron-sample-with-create-react-app-and-electron-builder , which provides: TypeScript support for Electron main process source code. Hot-reload support for Electron app. Electron-builder support. Check out the Architecture document for more information.","title":"Development"},{"location":"development/#building-running","text":"","title":"Building &amp; Running"},{"location":"development/#prerequisites","text":"Download & Install Git . OSX and Linux machines typically have this already installed. Download & Install Node.js and the npm package manager. Clone this repository. Make sure you are running the node version specified in .npmrc or if you are using nvm , you can run the nvm install command to quickly install and use the required node version.","title":"Prerequisites"},{"location":"development/#running","text":"Install npm dependencies: npm install Start the application: npm run electron:dev","title":"Running"},{"location":"development/#hot-reloading","text":"The Electron app will reload if you make edits in the electron directory. You will also see any lint errors in the console.","title":"Hot Reloading"},{"location":"development/#building","text":"Build the Electron app package for production: npm run electron:build The output will be located in the dist folder.","title":"Building"},{"location":"development/#help-support","text":"Feel free to reach out and ask questions on our Discord server .","title":"Help &amp; Support"},{"location":"faq/","text":"FAQ 1. What are the prerequisites for using Monokle? You will need to install the following two prerequisites to successfully run Monokle: Helm - Required for Helm Preview functionality. Kubectl - Required for Kustomize Preview and Deploy/Diff functionality. 2. What OS does Monokle support? Monokle supports Windows, MacOS and Linux. Get the latest installers for MacOS and Windows on GitHub . For running Monokle on Linux, run it from the source, following the steps as outlined in the Getting Started documentation. 3. Why can\u2019t I add any clusters? While adding new clusters, a valid kubeconfig file is required. Please check that all the needed configuration settings are present in your kubeconfig file are valid. For more detail read the kubeconfig documentation. 4. Why is Kubectl required to run Monokle? You need to install and configure kubectl for previewing kustomization.yaml files. It helps to debug your configurations before you deploy them to your cluster. 5. Does Monokle support Helm? Yes, Monokle allows you to navigate and preview the output of a Helm chart for an existing values files. Read more at Working with Helm . 6. Can I work on multiple projects simultaneously? You can launch multiple project windows using the New Monokle Windows option. It allows you to work on multiple folders or clusters simultaneously; thus visual navigation for the multiple pages becomes simpler and faster. 7. Can I use Monokle with Flux/ArgoCD? Yes, Monokle can be used for creating / editing / debugging manifests before they are deployed to a cluster using a CD tool like ArgoCD or Flux. 8. How to open Helm and Kustomization preview? You can navigate to the resources created by Kustomize or Helm in the navigator. Hover over the resources and hit the button to perform the preview and see the generated resources in the navigator. 9. Why is Autocomplete not working in the editor? The source editor provides an autocomplete option for only native Kubernetes resources. Therefore, the autocomplete feature is not available for any other resources except the resources in the YAML manifests. 10. How to save changes in the editor? The source editor automatically saves the current changes in your resource manifests as long as they are valid YAML files.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#1-what-are-the-prerequisites-for-using-monokle","text":"You will need to install the following two prerequisites to successfully run Monokle: Helm - Required for Helm Preview functionality. Kubectl - Required for Kustomize Preview and Deploy/Diff functionality.","title":"1. What are the prerequisites for using Monokle?"},{"location":"faq/#2-what-os-does-monokle-support","text":"Monokle supports Windows, MacOS and Linux. Get the latest installers for MacOS and Windows on GitHub . For running Monokle on Linux, run it from the source, following the steps as outlined in the Getting Started documentation.","title":"2. What OS does Monokle support?"},{"location":"faq/#3-why-cant-i-add-any-clusters","text":"While adding new clusters, a valid kubeconfig file is required. Please check that all the needed configuration settings are present in your kubeconfig file are valid. For more detail read the kubeconfig documentation.","title":"3. Why can\u2019t I add any clusters?"},{"location":"faq/#4-why-is-kubectl-required-to-run-monokle","text":"You need to install and configure kubectl for previewing kustomization.yaml files. It helps to debug your configurations before you deploy them to your cluster.","title":"4. Why is Kubectl required to run Monokle?"},{"location":"faq/#5-does-monokle-support-helm","text":"Yes, Monokle allows you to navigate and preview the output of a Helm chart for an existing values files. Read more at Working with Helm .","title":"5. Does Monokle support Helm?"},{"location":"faq/#6-can-i-work-on-multiple-projects-simultaneously","text":"You can launch multiple project windows using the New Monokle Windows option. It allows you to work on multiple folders or clusters simultaneously; thus visual navigation for the multiple pages becomes simpler and faster.","title":"6. Can I work on multiple projects simultaneously?"},{"location":"faq/#7-can-i-use-monokle-with-fluxargocd","text":"Yes, Monokle can be used for creating / editing / debugging manifests before they are deployed to a cluster using a CD tool like ArgoCD or Flux.","title":"7. Can I use Monokle with Flux/ArgoCD?"},{"location":"faq/#8-how-to-open-helm-and-kustomization-preview","text":"You can navigate to the resources created by Kustomize or Helm in the navigator. Hover over the resources and hit the button to perform the preview and see the generated resources in the navigator.","title":"8. How to open Helm and Kustomization preview?"},{"location":"faq/#9-why-is-autocomplete-not-working-in-the-editor","text":"The source editor provides an autocomplete option for only native Kubernetes resources. Therefore, the autocomplete feature is not available for any other resources except the resources in the YAML manifests.","title":"9. Why is Autocomplete not working in the editor?"},{"location":"faq/#10-how-to-save-changes-in-the-editor","text":"The source editor automatically saves the current changes in your resource manifests as long as they are valid YAML files.","title":"10. How to save changes in the editor?"},{"location":"features/","text":"Feature Overview Here is a short list of some of the features currently in Monokle. A big thanks to the excellent Argo-Rollouts project on GitHub for providing plentiful manifests for us to run Monokle against. Navigate k8s Objects Easily Monokle compiles a list of all the objects in your repo (from files you didn't want ignored), to give you a handy overview of all your resources - read more here . Validate and Follow Links Up- or Downstream through your Manifests Surf up- or downstream through your resources! Monokle highlights other resources that your selection has direct relations to and even provides you with the links to go to them quickly - read more here . Preview Resources Generated by Kustomize and Helm Do a quick dry-run, enabling you to navigate and debug the resources created by Kustomize or Helm. Apply them to the cluster when you are satisfied - read more about Kustomize and Helm . Locate Source File Quickly and Find Dead-end Links When you select a resource, Monokle will show which file it was defined in. A yellow warning triangle indicates that a resource is pointing to a link that does not exist. Browse and Update Cluster Objects To browse a cluster instead of a repo, simply click the \"Load\" button to import all objects from the cluster into Monokle - read more . If you need to make any immediate hot-fixes, simply modify the resource in the source editor and click the \"Apply\" button. Manage Multiple Projects Easily switch in between projects to more efficiently work with multiple projects at the same time. Diff Multiple Resources When a resource is selected in the navigator, the Editor contains a Diff button at the top right. Selecting Diff will compare the selected resource against the currently configured cluster: If the resource does not exist in the cluster an error will be shown. If the resource does exist the Diff dialog will be shown. In the screenshot above: The left side shows the resource in Monokle. The right side shows the resource retrieved from the cluster. Differences are highlighted as shown. Create a Resource from a Template Monokle allows the use of templates to start a new project via the Start from a template option: The Create a Project from a Template dialog appears: Name your project, select its location and click Next: Select a Template . Monokle includes a default set of templates which are installed automatically when starting Monokle for the first time and available in the Templates Explorer when working with your Monokle projects: Check out the Monokle Default Templates Plugin repository to see the complete list of templates that are included along with their corresponding schemas and manifests.","title":"Feature Overview"},{"location":"features/#feature-overview","text":"Here is a short list of some of the features currently in Monokle. A big thanks to the excellent Argo-Rollouts project on GitHub for providing plentiful manifests for us to run Monokle against.","title":"Feature Overview"},{"location":"features/#navigate-k8s-objects-easily","text":"Monokle compiles a list of all the objects in your repo (from files you didn't want ignored), to give you a handy overview of all your resources - read more here .","title":"Navigate k8s Objects Easily"},{"location":"features/#validate-and-follow-links-up-or-downstream-through-your-manifests","text":"Surf up- or downstream through your resources! Monokle highlights other resources that your selection has direct relations to and even provides you with the links to go to them quickly - read more here .","title":"Validate and Follow Links Up- or Downstream through your Manifests"},{"location":"features/#preview-resources-generated-by-kustomize-and-helm","text":"Do a quick dry-run, enabling you to navigate and debug the resources created by Kustomize or Helm. Apply them to the cluster when you are satisfied - read more about Kustomize and Helm .","title":"Preview Resources Generated by Kustomize and Helm"},{"location":"features/#locate-source-file-quickly-and-find-dead-end-links","text":"When you select a resource, Monokle will show which file it was defined in. A yellow warning triangle indicates that a resource is pointing to a link that does not exist.","title":"Locate Source File Quickly and Find Dead-end Links"},{"location":"features/#browse-and-update-cluster-objects","text":"To browse a cluster instead of a repo, simply click the \"Load\" button to import all objects from the cluster into Monokle - read more . If you need to make any immediate hot-fixes, simply modify the resource in the source editor and click the \"Apply\" button.","title":"Browse and Update Cluster Objects"},{"location":"features/#manage-multiple-projects","text":"Easily switch in between projects to more efficiently work with multiple projects at the same time.","title":"Manage Multiple Projects"},{"location":"features/#diff-multiple-resources","text":"When a resource is selected in the navigator, the Editor contains a Diff button at the top right. Selecting Diff will compare the selected resource against the currently configured cluster: If the resource does not exist in the cluster an error will be shown. If the resource does exist the Diff dialog will be shown. In the screenshot above: The left side shows the resource in Monokle. The right side shows the resource retrieved from the cluster. Differences are highlighted as shown.","title":"Diff Multiple Resources"},{"location":"features/#create-a-resource-from-a-template","text":"Monokle allows the use of templates to start a new project via the Start from a template option: The Create a Project from a Template dialog appears: Name your project, select its location and click Next: Select a Template . Monokle includes a default set of templates which are installed automatically when starting Monokle for the first time and available in the Templates Explorer when working with your Monokle projects: Check out the Monokle Default Templates Plugin repository to see the complete list of templates that are included along with their corresponding schemas and manifests.","title":"Create a Resource from a Template"},{"location":"file-explorer/","text":"File Explorer The File Explorer shows all files parsed in the folder selected: Excluded files are greyed out. Files containing resource manifests have a number displayed after them, showing the number of resources found in that file. Selecting a file will highlight contained resources in the Navigator and attempt to scroll them into view. The contents of the file will be shown in the source editor to the right, allowing for direct editing of the file. In this screenshot: The argo-rollouts-aggregate-roles.yaml file is selected - the \"3\" after the filename indicates it contains 3 kubernetes resources. The 3 ClusterRole resources in the file are highlighed in the Navigator in the middle of the screen. The contents of the file are shown in the editor to the right. While in the File Explorer, the File Action drop down list is available by clicking the ellipsis to the right of the file name. In the File Actions pop up menu, the following actions are available: Add Resource Filter on this file Add to Files: Exclude Copy Path Copy Relative Path Rename Delete Reveal in Finder The same functionality is available for Folders: In the Folder Actions pop up menu, the following actions are available: New Folder New Resource Filter on this folder Add to Files: Exclude Copy Path Copy Relative Path Rename Delete Reveal in Finder","title":"Working with File Explorer"},{"location":"file-explorer/#file-explorer","text":"The File Explorer shows all files parsed in the folder selected: Excluded files are greyed out. Files containing resource manifests have a number displayed after them, showing the number of resources found in that file. Selecting a file will highlight contained resources in the Navigator and attempt to scroll them into view. The contents of the file will be shown in the source editor to the right, allowing for direct editing of the file. In this screenshot: The argo-rollouts-aggregate-roles.yaml file is selected - the \"3\" after the filename indicates it contains 3 kubernetes resources. The 3 ClusterRole resources in the file are highlighed in the Navigator in the middle of the screen. The contents of the file are shown in the editor to the right. While in the File Explorer, the File Action drop down list is available by clicking the ellipsis to the right of the file name. In the File Actions pop up menu, the following actions are available: Add Resource Filter on this file Add to Files: Exclude Copy Path Copy Relative Path Rename Delete Reveal in Finder The same functionality is available for Folders: In the Folder Actions pop up menu, the following actions are available: New Folder New Resource Filter on this folder Add to Files: Exclude Copy Path Copy Relative Path Rename Delete Reveal in Finder","title":"File Explorer"},{"location":"form-editor/","text":"Using the Form Editor Edit Resources Properties via Form Monokle shows form editors for diverse Kubernetes resources which allows you to interactively change the specification of your resources using visual controls/inputs. For example in the case of a ConfigMap Kubernetes resource, clicking on \"Form\" at the top of the Editor, opens the form fields editor for key ConfigMap properties, allowing you to edit/discover all available properties without having to learn or lookup the corresponding YAML/resource documentation. Any changes made and saved (with the Save button on the top right) are written back to the underlying YAML. Using the Object Metadata Editor To launch the Metadata Editor, click on the Metadata button. For editing object metadata, you need to provide a specific name, namespace, annotations, labels, cluster name, generate name, and finalizers to uniquely identify the object. Check out this tutorial for more details on how to use the Form Editor and Metadata.","title":"Working with the Form Editor"},{"location":"form-editor/#using-the-form-editor","text":"","title":"Using the Form Editor"},{"location":"form-editor/#edit-resources-properties-via-form","text":"Monokle shows form editors for diverse Kubernetes resources which allows you to interactively change the specification of your resources using visual controls/inputs. For example in the case of a ConfigMap Kubernetes resource, clicking on \"Form\" at the top of the Editor, opens the form fields editor for key ConfigMap properties, allowing you to edit/discover all available properties without having to learn or lookup the corresponding YAML/resource documentation. Any changes made and saved (with the Save button on the top right) are written back to the underlying YAML.","title":"Edit Resources Properties via Form"},{"location":"form-editor/#using-the-object-metadata-editor","text":"To launch the Metadata Editor, click on the Metadata button. For editing object metadata, you need to provide a specific name, namespace, annotations, labels, cluster name, generate name, and finalizers to uniquely identify the object. Check out this tutorial for more details on how to use the Form Editor and Metadata.","title":"Using the Object Metadata Editor"},{"location":"getting-started/","text":"Getting Started Download & Install Download and install the latest version from GitHub below macOS Download the .dmg file. Windows Download the .exe file. Linux (since Monokle 1.3.0) Download the .appImage / .deb file for your platform. Run from Source See Development on how to run Monokle from its source-code. Install Dependencies Monokle uses Helm, Kubectl and Kustomize for corresponding preview functionality. Helm - required for Helm Preview functionality Kubectl or Kustomize - required for Kustomize Preview and Apply/Diff functionality Read Tutorials Check out one of our tutorials to get started: How to Work with Manifests to get you started with basic concepts. How to Browse Clusters to help you interact with your cluster(s). How to Configure Monokle to see how you can set up Monokle to your needs. How to Fix Broken Links to give you an idea of how Monokle can be used for resource validation and correction. How to Work with ConfigMaps to see how the Form editor for ConfigMaps helps you edit resources without having to write any YAML. Get in Touch! Have problems? Suggestions? Feature requests? Please join our Discord Server and let us know - or open an issue on GitHub .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#download-install","text":"Download and install the latest version from GitHub below","title":"Download &amp; Install"},{"location":"getting-started/#macos","text":"Download the .dmg file.","title":"macOS"},{"location":"getting-started/#windows","text":"Download the .exe file.","title":"Windows"},{"location":"getting-started/#linux-since-monokle-130","text":"Download the .appImage / .deb file for your platform.","title":"Linux (since Monokle 1.3.0)"},{"location":"getting-started/#run-from-source","text":"See Development on how to run Monokle from its source-code.","title":"Run from Source"},{"location":"getting-started/#install-dependencies","text":"Monokle uses Helm, Kubectl and Kustomize for corresponding preview functionality. Helm - required for Helm Preview functionality Kubectl or Kustomize - required for Kustomize Preview and Apply/Diff functionality","title":"Install Dependencies"},{"location":"getting-started/#read-tutorials","text":"Check out one of our tutorials to get started: How to Work with Manifests to get you started with basic concepts. How to Browse Clusters to help you interact with your cluster(s). How to Configure Monokle to see how you can set up Monokle to your needs. How to Fix Broken Links to give you an idea of how Monokle can be used for resource validation and correction. How to Work with ConfigMaps to see how the Form editor for ConfigMaps helps you edit resources without having to write any YAML.","title":"Read Tutorials"},{"location":"getting-started/#get-in-touch","text":"Have problems? Suggestions? Feature requests? Please join our Discord Server and let us know - or open an issue on GitHub .","title":"Get in Touch!"},{"location":"helm/","text":"Working with Helm Monokle has built-in support for Helm - a popular tool for managing kubernetes configurations: Monokle can identify and show Helm charts and their values files. Monokle can preview resources generated by Helm, helping you debug your charts before you deploy them to your cluster. This requires Helm to be installed and configured in your PATH. All examples below are from the Emissary Ingress Charts Folder - clone and try these yourself! Configuring Helm Integration In Settings, set which Helm command to use when generating Helm previews in Monokle: Helm Preview Configurations Each Helm chart has a subsection named Preview Configurations . This allows you to configure how to run the Helm Preview and then save the configuration in order to quickly use it at any time. Hovering over the Preview Configurations section will show a Plus button to the right: Clicking on the button will open a Drawer to the right: This form allows you to: - Name your configuration. - Choose and order which values files to be used for the preview. - Choose between using the helm template or helm install commands. - And, optionally, provide options for the command. See more about the options in Helm\u2019s documentation: https://helm.sh/docs/helm/helm_install/. Finally, you can save your configuration for later use or save it and start previewing the resources right away. Saved Preview Configurations will show up in the subsection of the Helm chart it was created for: By hovering over the configuration you will see the Preview, Edit and Delete actions. If you instead click and select the configuration, the source code editor from the right will be replaced with the Helm Command Pane, which will display the generated command that will be run by Monokle to create the preview: Helm Navigation When selecting a folder containing Helm charts (identified by Chart.yaml files), these will automatically be displayed in a \"Helm Charts\" section on top of the Navigator: In the screenshot: The Helm Charts section shows the \"emissary-ingress\" Helm chart and the contained values files. The single values.yaml file has been selected. The corresponding values.yaml file has been highlighted to the left. The content of the file is shown in the Source editor to the right. The Navigator at this point shows any K8s resources that Monokle finds in the selected folder. Helm Preview The Helm Preview functionality helps you understand what resources would be installed in your cluster when running Helm with a specific values file. Hovering over a values file reveals a Preview action to the right: Selecting this action will run Helm on the selected file with either the install or template option (as configured in the global settings) and replace the contents of the Navigator with the generated resources. For example, previewing the values file above will result in the following: Monokle is now in Preview Mode (as indicated by the header at the top): The File Explorer has been disabled. The Navigator now contains all resources generated by running Helm with the selected values file. Resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode. Resource links are shown as before with corresponding popups/links/etc. Selecting Preview for a different values file will switch the preview to the output of Helm for that file. Selecting Exit in the top right or next to the values file restores the previous resource navigator. Editing of Values Files During Preview When previewing a Helm values file, it is possible to edit the previewed file and recreate the preview, allowing you to quickly assess the impact of any changes on the generated files, instead of having to exit and recreate the preview to make a change.","title":"Working with Helm Charts"},{"location":"helm/#working-with-helm","text":"Monokle has built-in support for Helm - a popular tool for managing kubernetes configurations: Monokle can identify and show Helm charts and their values files. Monokle can preview resources generated by Helm, helping you debug your charts before you deploy them to your cluster. This requires Helm to be installed and configured in your PATH. All examples below are from the Emissary Ingress Charts Folder - clone and try these yourself!","title":"Working with Helm"},{"location":"helm/#configuring-helm-integration","text":"In Settings, set which Helm command to use when generating Helm previews in Monokle:","title":"Configuring Helm Integration"},{"location":"helm/#helm-preview-configurations","text":"Each Helm chart has a subsection named Preview Configurations . This allows you to configure how to run the Helm Preview and then save the configuration in order to quickly use it at any time. Hovering over the Preview Configurations section will show a Plus button to the right: Clicking on the button will open a Drawer to the right: This form allows you to: - Name your configuration. - Choose and order which values files to be used for the preview. - Choose between using the helm template or helm install commands. - And, optionally, provide options for the command. See more about the options in Helm\u2019s documentation: https://helm.sh/docs/helm/helm_install/. Finally, you can save your configuration for later use or save it and start previewing the resources right away. Saved Preview Configurations will show up in the subsection of the Helm chart it was created for: By hovering over the configuration you will see the Preview, Edit and Delete actions. If you instead click and select the configuration, the source code editor from the right will be replaced with the Helm Command Pane, which will display the generated command that will be run by Monokle to create the preview:","title":"Helm Preview Configurations"},{"location":"helm/#helm-navigation","text":"When selecting a folder containing Helm charts (identified by Chart.yaml files), these will automatically be displayed in a \"Helm Charts\" section on top of the Navigator: In the screenshot: The Helm Charts section shows the \"emissary-ingress\" Helm chart and the contained values files. The single values.yaml file has been selected. The corresponding values.yaml file has been highlighted to the left. The content of the file is shown in the Source editor to the right. The Navigator at this point shows any K8s resources that Monokle finds in the selected folder.","title":"Helm Navigation"},{"location":"helm/#helm-preview","text":"The Helm Preview functionality helps you understand what resources would be installed in your cluster when running Helm with a specific values file. Hovering over a values file reveals a Preview action to the right: Selecting this action will run Helm on the selected file with either the install or template option (as configured in the global settings) and replace the contents of the Navigator with the generated resources. For example, previewing the values file above will result in the following: Monokle is now in Preview Mode (as indicated by the header at the top): The File Explorer has been disabled. The Navigator now contains all resources generated by running Helm with the selected values file. Resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode. Resource links are shown as before with corresponding popups/links/etc. Selecting Preview for a different values file will switch the preview to the output of Helm for that file. Selecting Exit in the top right or next to the values file restores the previous resource navigator.","title":"Helm Preview"},{"location":"helm/#editing-of-values-files-during-preview","text":"When previewing a Helm values file, it is possible to edit the previewed file and recreate the preview, allowing you to quickly assess the impact of any changes on the generated files, instead of having to exit and recreate the preview to make a change.","title":"Editing of Values Files During Preview"},{"location":"hotkeys/","text":"Monokle Keyboard Shortcuts Monokle currently supports the following keyboard shortcuts: Cluster Preview: Ctrl/Cmd I Settings: Ctrl/Cmd P Exit Preview: ESC Browse Folder: Ctrl/Cmd O Refresh Folder: Ctrl/Cmd F5 Toggle Left Pane: Ctrl/Cmd B Toggle Right Pane: Ctrl/Cmd ALT B Save (in editors): Ctrl/Cmd S Navigate Back (Selection History): ALT ArrowLeft Navigate Forward (Selection History): ALT ArrowRight Open New Resource Wizard: Ctrl/Cmd N Apply Resource or File to cluster: Ctrl/Cmd ALT S Diff Resource: Ctrl/Cmd ALT D Open File Explorer Tab: Ctrl/Cmd Shift E Open Cluster Tab: Ctrl/Cmd Shift C Open Kustomization Tab: Ctrl/Cmd Shift K Open Helm Tab: Ctrl/Cmd Shift H Open Validation Tab: Ctrl/Cmd Shift V Reset Resource Filters: Ctrl/Cmd ALT R Open Quick Search: Ctrl/Cmd SHIFT P Zoom In: Ctrl/Cmd = Zoom Out: Ctrl/Cmd - Open Shortcuts: Ctrl/Cmd / Reload Preview: Ctrl/Cmd R","title":"Keyboard Shortcuts"},{"location":"hotkeys/#monokle-keyboard-shortcuts","text":"Monokle currently supports the following keyboard shortcuts: Cluster Preview: Ctrl/Cmd I Settings: Ctrl/Cmd P Exit Preview: ESC Browse Folder: Ctrl/Cmd O Refresh Folder: Ctrl/Cmd F5 Toggle Left Pane: Ctrl/Cmd B Toggle Right Pane: Ctrl/Cmd ALT B Save (in editors): Ctrl/Cmd S Navigate Back (Selection History): ALT ArrowLeft Navigate Forward (Selection History): ALT ArrowRight Open New Resource Wizard: Ctrl/Cmd N Apply Resource or File to cluster: Ctrl/Cmd ALT S Diff Resource: Ctrl/Cmd ALT D Open File Explorer Tab: Ctrl/Cmd Shift E Open Cluster Tab: Ctrl/Cmd Shift C Open Kustomization Tab: Ctrl/Cmd Shift K Open Helm Tab: Ctrl/Cmd Shift H Open Validation Tab: Ctrl/Cmd Shift V Reset Resource Filters: Ctrl/Cmd ALT R Open Quick Search: Ctrl/Cmd SHIFT P Zoom In: Ctrl/Cmd = Zoom Out: Ctrl/Cmd - Open Shortcuts: Ctrl/Cmd / Reload Preview: Ctrl/Cmd R","title":"Monokle Keyboard Shortcuts"},{"location":"kustomize/","text":"Working with Kustomize Monokle has built-in support for Kustomize - a popular tool for managing Kubernetes configurations: Monokle can visualize dependencies and relationships between kustomize files to help you understand the scope of a specific kustomization. Monokle can preview resources generated by Kustomize, helping you debug your configurations before you deploy them to your cluster (requires kubectl to be installed and configured in your PATH). All examples below are from the Argo Rollouts Manifest Folder - clone and try these yourself! Configuring Kustomize Integration In Settings, set the defaults for working with Kustomize in Monokle: Use the drop-down selector to select how to invoke Kustomize when previewing or applying kustomization files: Tick the check box to enable Helm-related functionality when invoking Kustomize. Kustomize Navigation When selecting a folder containing kustomization.yaml files, these files will automatically be displayed in a Kustomizations section on top of the Navigator: In the screenshot: The Kustomizations section shows all kustomization.yaml files - named after the folder they are in relative to the selected root folder. The \"base\" kustomization.yaml has been selected The corresponding kustomization.yaml file has been highlighted to the left. All \"downstream\" kustomizations and included resources are highlighted in the Navigator, helping you understand the \"scope\" of the selected kustomization. The content of the kustomzation resource is shown in the Source editor to the right, with corresponding resource links marked in the code. Just as with K8s resources, hovering over the link-icon to the right of the kustomization name shows its outgoing links: Here we can see the 10 resources included by the selected kustomization. Hovering the link-icon to the left of the kustomization name shows its incoming links: Here we see two \"upstream\" kustomizations that include the selected kustomization in their configuration. Kustomize Preview While the above helps you understand the relationships and dependencies between kustomizations and their included resources, the Preview functionality helps you understand what resources would be installed in your cluster when running kustomize. Hovering over a kustomization reveals a Preview action to the right: Selecting this action will run kustomize on the selected file with the -k option and replace the contents of the Navigator with the generated resources. For example previewing the \"base\" kustomization above will result in the following: Monokle is now in Preview Mode (as indicated by the header at the top): The File Explorer has been disabled. The Navigator now contains all resources generated by running Kustomize with the \"base\" kustomization: Resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode. Resource links are shown as before with corresponding popups/links/etc. Selecting Preview for a different kustomization will switch the output of kustomize to that resource instead. Selecting Exit in the top right or next to the kustomization restores the previous resource navigator. In the screenshot we can see that the selected kustomization resulted in 7 resources that contain references to the image specified in the kustomization configuration: Editing of Kustomizations During Preview When previewing a kustomization, it is possible to edit the previewed kustomization.yaml file and recreate the preview, allowing you to quickly assess the impact of any changes on the generated files, instead of having to exit and recreate the preview to make a change.","title":"Working with Kustomize"},{"location":"kustomize/#working-with-kustomize","text":"Monokle has built-in support for Kustomize - a popular tool for managing Kubernetes configurations: Monokle can visualize dependencies and relationships between kustomize files to help you understand the scope of a specific kustomization. Monokle can preview resources generated by Kustomize, helping you debug your configurations before you deploy them to your cluster (requires kubectl to be installed and configured in your PATH). All examples below are from the Argo Rollouts Manifest Folder - clone and try these yourself!","title":"Working with Kustomize"},{"location":"kustomize/#configuring-kustomize-integration","text":"In Settings, set the defaults for working with Kustomize in Monokle: Use the drop-down selector to select how to invoke Kustomize when previewing or applying kustomization files: Tick the check box to enable Helm-related functionality when invoking Kustomize.","title":"Configuring Kustomize Integration"},{"location":"kustomize/#kustomize-navigation","text":"When selecting a folder containing kustomization.yaml files, these files will automatically be displayed in a Kustomizations section on top of the Navigator: In the screenshot: The Kustomizations section shows all kustomization.yaml files - named after the folder they are in relative to the selected root folder. The \"base\" kustomization.yaml has been selected The corresponding kustomization.yaml file has been highlighted to the left. All \"downstream\" kustomizations and included resources are highlighted in the Navigator, helping you understand the \"scope\" of the selected kustomization. The content of the kustomzation resource is shown in the Source editor to the right, with corresponding resource links marked in the code. Just as with K8s resources, hovering over the link-icon to the right of the kustomization name shows its outgoing links: Here we can see the 10 resources included by the selected kustomization. Hovering the link-icon to the left of the kustomization name shows its incoming links: Here we see two \"upstream\" kustomizations that include the selected kustomization in their configuration.","title":"Kustomize Navigation"},{"location":"kustomize/#kustomize-preview","text":"While the above helps you understand the relationships and dependencies between kustomizations and their included resources, the Preview functionality helps you understand what resources would be installed in your cluster when running kustomize. Hovering over a kustomization reveals a Preview action to the right: Selecting this action will run kustomize on the selected file with the -k option and replace the contents of the Navigator with the generated resources. For example previewing the \"base\" kustomization above will result in the following: Monokle is now in Preview Mode (as indicated by the header at the top): The File Explorer has been disabled. The Navigator now contains all resources generated by running Kustomize with the \"base\" kustomization: Resource navigation works as with files; selecting a resource shows its content in the source editor in read-only mode. Resource links are shown as before with corresponding popups/links/etc. Selecting Preview for a different kustomization will switch the output of kustomize to that resource instead. Selecting Exit in the top right or next to the kustomization restores the previous resource navigator. In the screenshot we can see that the selected kustomization resulted in 7 resources that contain references to the image specified in the kustomization configuration:","title":"Kustomize Preview"},{"location":"kustomize/#editing-of-kustomizations-during-preview","text":"When previewing a kustomization, it is possible to edit the previewed kustomization.yaml file and recreate the preview, allowing you to quickly assess the impact of any changes on the generated files, instead of having to exit and recreate the preview to make a change.","title":"Editing of Kustomizations During Preview"},{"location":"overview/","text":"UI Overview Launch Monokle Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Launch Monokle and, on the welcome screen, there are three options to start working with projects: Select an exisiting folder. Create an empty project. Start from a template. On subsequent start-ups, Monokle automatically loads the most recently selected folder, if the corresponding \"Load recent folder on Startup\" setting has been enabled: Working with Projects Click Select an existing folder to add your project folder containing K8 resources. Monokle is laid out like many other desktop applications: Left to right: The vertical toolbar to the far left allows you to switch between File, Kustomize, Helm and View Template mode. The File Explorer (shown in screenshot) shows the contents of the currently selected folder. The Navigator in the center shows all resources found in the current folder or cluster. By default it shows all possible Resource sections and subsections - when selecting a folder or cluster only those sections that actually contain any resources will be shown. The Editor section to the right contains editors/views/actions for the currently selected resource or file. The top right contains the following buttons: Show Latest Notifications Open Plugins Manager Open Settings (see below) Help: Documentation -> opens the Monokle documentation in your system browser. GitHub -> opens the Monokle GitHub repo in your system browser. Discord -> Opens Discord to talk to us about your Monokle experience. Settings Clicking the Settings icon on the top right opens the settings: Global Settings Projects Root Path On Startup : Automatically load last project. Show Cluster Selector. Telemetry : Disable Usage Data Disable Error Reports Default Project Settings Kubeconfig : Sets which kubeconfig Monokle should use for all cluster interactions. Files: Include : Sets which files to parse for kubernetes resources when scanning folders. Files: Exclude : Sets which files/folders to exclude when scanning folders for resources. Helm Preview Mode : Sets which Helm command to use for generating previews (see Working with Helm Charts ). Template: uses Helm Template Install: uses Helm Install Kustomize Command : Sets how to invoke kustomize when previewing and applying kustomization file. Use kubectl Use kustomize Maximum folder-read recursion depth : Configures how \"deep\" Monokle will parse a specified folder (to avoid going too deep). Resource links processing : Ignore optional unsatisfied links. Active Project Settings Kubernetes Version : Sets Kubernetes' schema version for validation. Kubeconfig : Sets which kubeconfig Monokle should use for all cluster interactions. Files: Include : Sets which files to parse for kubernetes resources when scanning folders. Files: Exclude : Sets which files/folders to exclude when scanning folders for resources. Helm Preview Mode : Sets which Helm command to use for generating previews (see Working with Helm Charts ). Template: uses Helm Template Install: uses Helm Install Kustomize Command : Sets how to invoke kustomize when previewing and applying kustomization file. Use kubectl Use kustomize Maximum folder-read recursion depth : Configures how \"deep\" Monokle will parse a specified folder (to avoid going too deep). Resource links processing : Ignore optional unsatisfied links. System Menu Monokle provides a system menu with the common File/Edit/View/Window/Help functionality. Mac System Menu: Windows System Menu: Multiple Windows You can launch multiple project windows using the New Monokle Windows option. This allows you to work on multiple folders or clusters simultaneously. Thus visual navigation for the recently used pages becomes simpler and faster. Action: File > New Monokle Window Keyboard Shortcuts Please visit Monokle Keyboard Shortcuts for a complete list of keyboard shortcuts. Auto-update The Monokle (on Mac) / Help (on Windows) system menus provide a \"Check for Update\" action that will check for an update and prompt to download, if available.","title":"UI Overview"},{"location":"overview/#ui-overview","text":"","title":"UI Overview"},{"location":"overview/#launch-monokle","text":"Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Launch Monokle and, on the welcome screen, there are three options to start working with projects: Select an exisiting folder. Create an empty project. Start from a template. On subsequent start-ups, Monokle automatically loads the most recently selected folder, if the corresponding \"Load recent folder on Startup\" setting has been enabled:","title":"Launch Monokle"},{"location":"overview/#working-with-projects","text":"Click Select an existing folder to add your project folder containing K8 resources. Monokle is laid out like many other desktop applications: Left to right: The vertical toolbar to the far left allows you to switch between File, Kustomize, Helm and View Template mode. The File Explorer (shown in screenshot) shows the contents of the currently selected folder. The Navigator in the center shows all resources found in the current folder or cluster. By default it shows all possible Resource sections and subsections - when selecting a folder or cluster only those sections that actually contain any resources will be shown. The Editor section to the right contains editors/views/actions for the currently selected resource or file. The top right contains the following buttons: Show Latest Notifications Open Plugins Manager Open Settings (see below) Help: Documentation -> opens the Monokle documentation in your system browser. GitHub -> opens the Monokle GitHub repo in your system browser. Discord -> Opens Discord to talk to us about your Monokle experience.","title":"Working with Projects"},{"location":"overview/#settings","text":"Clicking the Settings icon on the top right opens the settings:","title":"Settings"},{"location":"overview/#global-settings","text":"Projects Root Path On Startup : Automatically load last project. Show Cluster Selector. Telemetry : Disable Usage Data Disable Error Reports","title":"Global Settings"},{"location":"overview/#default-project-settings","text":"Kubeconfig : Sets which kubeconfig Monokle should use for all cluster interactions. Files: Include : Sets which files to parse for kubernetes resources when scanning folders. Files: Exclude : Sets which files/folders to exclude when scanning folders for resources. Helm Preview Mode : Sets which Helm command to use for generating previews (see Working with Helm Charts ). Template: uses Helm Template Install: uses Helm Install Kustomize Command : Sets how to invoke kustomize when previewing and applying kustomization file. Use kubectl Use kustomize Maximum folder-read recursion depth : Configures how \"deep\" Monokle will parse a specified folder (to avoid going too deep). Resource links processing : Ignore optional unsatisfied links.","title":"Default Project Settings"},{"location":"overview/#active-project-settings","text":"Kubernetes Version : Sets Kubernetes' schema version for validation. Kubeconfig : Sets which kubeconfig Monokle should use for all cluster interactions. Files: Include : Sets which files to parse for kubernetes resources when scanning folders. Files: Exclude : Sets which files/folders to exclude when scanning folders for resources. Helm Preview Mode : Sets which Helm command to use for generating previews (see Working with Helm Charts ). Template: uses Helm Template Install: uses Helm Install Kustomize Command : Sets how to invoke kustomize when previewing and applying kustomization file. Use kubectl Use kustomize Maximum folder-read recursion depth : Configures how \"deep\" Monokle will parse a specified folder (to avoid going too deep). Resource links processing : Ignore optional unsatisfied links.","title":"Active Project Settings"},{"location":"overview/#system-menu","text":"Monokle provides a system menu with the common File/Edit/View/Window/Help functionality. Mac System Menu: Windows System Menu:","title":"System Menu"},{"location":"overview/#multiple-windows","text":"You can launch multiple project windows using the New Monokle Windows option. This allows you to work on multiple folders or clusters simultaneously. Thus visual navigation for the recently used pages becomes simpler and faster. Action: File > New Monokle Window","title":"Multiple Windows"},{"location":"overview/#keyboard-shortcuts","text":"Please visit Monokle Keyboard Shortcuts for a complete list of keyboard shortcuts.","title":"Keyboard Shortcuts"},{"location":"overview/#auto-update","text":"The Monokle (on Mac) / Help (on Windows) system menus provide a \"Check for Update\" action that will check for an update and prompt to download, if available.","title":"Auto-update"},{"location":"plugins/","text":"What is a Plugin? Simply, any GitHub repository that contains a package.json file (the plugin entry file) can be installed as a plugin if the entry file follows the structure of a Monokle plugin. What is the structure of package.json for a valid Monokle plugin? Monokle uses the following properties: name , author , version repository , description , and monoklePlugin . The monoklePlugin property should be an object containing an array named modules . Here\u2019s an example of a package.json for a Monokle plugin: { \"name\" : \"My first plugin\" , \"description\" : \"Hello world!\" , \"version\" : \"1.0.0\" , \"author\" : \"Kubeshop\" , \"repository\" : \"https://github.com/kubeshop/monokle-default-templates-plugin\" , \"monoklePlugin\" : { \"modules\" : [] } } What types of modules does a Plugin support or what does a module look like? With the release of 1.5.0 we are only supporting Template modules. More module types will be added in future versions. Each plugin may have multiple modules. Here is how you can reference a template module: \"monoklePlugin\" : { \"modules\" : [ { \"type\" : \"template\" , \"path\" : \"<relative-path-to-template-folder>\" } ] } Read more about templates here. How do I install a Plugin? Open the Plugins manager from the top right icon: Click on the '+' button: A modal will appear asking for the Plugin URL: The URL must be a valid GitHub repository url in the format https://github.com/[user]/[repository]. The primary branch should be main . The plugin installer will search there for the package.json file. How do I manually install a Plugin? This should be used only as a workaround for developing plugins. On Mac: Copy your plugin folder to /Users/<YourUser>/Libray/Application Support/monokle/monoklePlugins . Reopen or reload Monokle (from Window -> Reload). On Windows: Copy your plugin folder to C:\\Users\\<YourUser>\\AppData\\Roaming\\monokle\\monoklePlugins . Reopen or reload Monokle (from Window -> Reload).","title":"Plugins"},{"location":"plugins/#what-is-a-plugin","text":"Simply, any GitHub repository that contains a package.json file (the plugin entry file) can be installed as a plugin if the entry file follows the structure of a Monokle plugin.","title":"What is a Plugin?"},{"location":"plugins/#what-is-the-structure-of-packagejson-for-a-valid-monokle-plugin","text":"Monokle uses the following properties: name , author , version repository , description , and monoklePlugin . The monoklePlugin property should be an object containing an array named modules . Here\u2019s an example of a package.json for a Monokle plugin: { \"name\" : \"My first plugin\" , \"description\" : \"Hello world!\" , \"version\" : \"1.0.0\" , \"author\" : \"Kubeshop\" , \"repository\" : \"https://github.com/kubeshop/monokle-default-templates-plugin\" , \"monoklePlugin\" : { \"modules\" : [] } }","title":"What is the structure of package.json for a valid Monokle plugin?"},{"location":"plugins/#what-types-of-modules-does-a-plugin-support-or-what-does-a-module-look-like","text":"With the release of 1.5.0 we are only supporting Template modules. More module types will be added in future versions. Each plugin may have multiple modules. Here is how you can reference a template module: \"monoklePlugin\" : { \"modules\" : [ { \"type\" : \"template\" , \"path\" : \"<relative-path-to-template-folder>\" } ] } Read more about templates here.","title":"What types of modules does a Plugin support or what does a module look like?"},{"location":"plugins/#how-do-i-install-a-plugin","text":"Open the Plugins manager from the top right icon: Click on the '+' button: A modal will appear asking for the Plugin URL: The URL must be a valid GitHub repository url in the format https://github.com/[user]/[repository]. The primary branch should be main . The plugin installer will search there for the package.json file.","title":"How do I install a Plugin?"},{"location":"plugins/#how-do-i-manually-install-a-plugin","text":"This should be used only as a workaround for developing plugins. On Mac: Copy your plugin folder to /Users/<YourUser>/Libray/Application Support/monokle/monoklePlugins . Reopen or reload Monokle (from Window -> Reload). On Windows: Copy your plugin folder to C:\\Users\\<YourUser>\\AppData\\Roaming\\monokle\\monoklePlugins . Reopen or reload Monokle (from Window -> Reload).","title":"How do I manually install a Plugin?"},{"location":"projects/","text":"Working with Projects Launch Monokle Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Launch Monokle and, on the welcome screen, there are three options to start working with projects: Select an exisiting folder. Create an empty project. Start from a template. Click Select an existing folder and navigate to an existing project folder containing K8 resources. Select and Manage a Project After a project is opened in Monokle, the project selector at the top of the screen will denote the project that is being displayed in the IDE. Use this selector to open a new project or switch in between projects: Manage Multiple Projects Easily switch in between projects to more efficiently work with multiple projects at the same time.","title":"Working with Projects"},{"location":"projects/#working-with-projects","text":"","title":"Working with Projects"},{"location":"projects/#launch-monokle","text":"Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Launch Monokle and, on the welcome screen, there are three options to start working with projects: Select an exisiting folder. Create an empty project. Start from a template. Click Select an existing folder and navigate to an existing project folder containing K8 resources.","title":"Launch Monokle"},{"location":"projects/#select-and-manage-a-project","text":"After a project is opened in Monokle, the project selector at the top of the screen will denote the project that is being displayed in the IDE. Use this selector to open a new project or switch in between projects:","title":"Select and Manage a Project"},{"location":"projects/#manage-multiple-projects","text":"Easily switch in between projects to more efficiently work with multiple projects at the same time.","title":"Manage Multiple Projects"},{"location":"resource-editing/","text":"Editing Resources Monokle allows you to edit resource manifests either in a Source Editor or a Form-based Editor which hides the underlying YAML complexity. Editing Resources When editing resources (not files), the editor is schema-aware for all native Kubernetes resources, which provides auto-complete (Ctrl-Space) and context-sensitive hover documentation. When editing a resource, click on the document icon at the top right of the Editor pane to open the corresponding Kubernetes documentation in a browser window: Working with Multiple Resources Select multiple resources by clicking the checkbox to the left of the resource name. Below, two resources are selected and the Delete or Deploy actions are available for both resources. Add a Resource While using Monokle, you can directly add new K8s resources. Once you have browsed and added your project folder, click on the New Resource button at the top of the navigator to launch the Add New Resource dialog. For adding resources to new or existing files in the navigator, click on the Save button at the top-right corner of the interface. While creating a resource, it is possible to select an existing resource as a template from the drop-down menu. Edit Resources in a Cluster You can easily view and edit resources from clusters. After making changes in a resource, you can quickly deploy them back to the cluster. Saving Changes The Save button on top of the editor will be enabled only if valid changes have been made - invalid YAML will not be savable. Saving a resource will update the containing file correspondingly and recalculate all affected ingoing/outging links for the resource. Editing Files When editing files directly by selecting them in the File Explorer, the editor will not show any links or provide context-sensitive editing functionality. Navigator Resource Options Click the ellipsis to the right of a resource name to see the options available: Unknown Resources will display in the Navigator but only have the Rename and Delete options: Rename a Resource You can rename resources and update all the references associated with that resource to ensure the integrity of that link. Clone a Resource You can use the Clone action to create a new resource by using existing resources as a template. Delete a Resource You can use the Delete action in the cluster mode to delete the resource from the actual cluster. Secret Resources Kubernetes secret resources are shown in the Navigator. A Secret is an object storing sensitive pieces of data such as usernames, passwords, tokens, and keys. Highlight the secret resource in the Navigator and the source will be displayed in the Editor pane. There, you can hover over the encoded secret value to see the decoded value (for username in the example below):","title":"Editing Resources"},{"location":"resource-editing/#editing-resources","text":"Monokle allows you to edit resource manifests either in a Source Editor or a Form-based Editor which hides the underlying YAML complexity.","title":"Editing Resources"},{"location":"resource-editing/#editing-resources_1","text":"When editing resources (not files), the editor is schema-aware for all native Kubernetes resources, which provides auto-complete (Ctrl-Space) and context-sensitive hover documentation. When editing a resource, click on the document icon at the top right of the Editor pane to open the corresponding Kubernetes documentation in a browser window:","title":"Editing Resources"},{"location":"resource-editing/#working-with-multiple-resources","text":"Select multiple resources by clicking the checkbox to the left of the resource name. Below, two resources are selected and the Delete or Deploy actions are available for both resources.","title":"Working with Multiple Resources"},{"location":"resource-editing/#add-a-resource","text":"While using Monokle, you can directly add new K8s resources. Once you have browsed and added your project folder, click on the New Resource button at the top of the navigator to launch the Add New Resource dialog. For adding resources to new or existing files in the navigator, click on the Save button at the top-right corner of the interface. While creating a resource, it is possible to select an existing resource as a template from the drop-down menu.","title":"Add a Resource"},{"location":"resource-editing/#edit-resources-in-a-cluster","text":"You can easily view and edit resources from clusters. After making changes in a resource, you can quickly deploy them back to the cluster.","title":"Edit Resources in a Cluster"},{"location":"resource-editing/#saving-changes","text":"The Save button on top of the editor will be enabled only if valid changes have been made - invalid YAML will not be savable. Saving a resource will update the containing file correspondingly and recalculate all affected ingoing/outging links for the resource.","title":"Saving Changes"},{"location":"resource-editing/#editing-files","text":"When editing files directly by selecting them in the File Explorer, the editor will not show any links or provide context-sensitive editing functionality.","title":"Editing Files"},{"location":"resource-editing/#navigator-resource-options","text":"Click the ellipsis to the right of a resource name to see the options available: Unknown Resources will display in the Navigator but only have the Rename and Delete options:","title":"Navigator Resource Options"},{"location":"resource-editing/#rename-a-resource","text":"You can rename resources and update all the references associated with that resource to ensure the integrity of that link.","title":"Rename a Resource"},{"location":"resource-editing/#clone-a-resource","text":"You can use the Clone action to create a new resource by using existing resources as a template.","title":"Clone a Resource"},{"location":"resource-editing/#delete-a-resource","text":"You can use the Delete action in the cluster mode to delete the resource from the actual cluster.","title":"Delete a Resource"},{"location":"resource-editing/#secret-resources","text":"Kubernetes secret resources are shown in the Navigator. A Secret is an object storing sensitive pieces of data such as usernames, passwords, tokens, and keys. Highlight the secret resource in the Navigator and the source will be displayed in the Editor pane. There, you can hover over the encoded secret value to see the decoded value (for username in the example below):","title":"Secret Resources"},{"location":"resource-navigation/","text":"Navigating Resources Resource Navigator The Navigator shows all resources found in the current project. Resources are grouped into sections/subsections based on their usage in Kubernetes. Selecting a resource automatically highlights both the file containing that resource and any other resourced linked to the selected one: In this screenshot: The argo-rollouts-metrics service is selected. The associated argo-rollouts-metrics-service.yaml file is highlighted to the left in the File Explorer. The linked argo-rollouts-metrics Deployment (via the selector in the Service manifest) is highlighted. The Service manifest is shown in the Editor to the right (with highlighting of the link to the Deployment on line 16). Resource Links Links between resources are indicated by link icons to the left and right each resource name: Links to the left indicate there are incoming links to the resource. For example, a ConfigMap might have an incoming link from a Deployment. Links to the right indicate there are outgoing links from the resource. For example, a Service might have a selector that selects a Deployment. Hovering over a link icon will show a popup with all links (either incoming or outgoing) allowing you to click on a link to take you to that resource in the navigator. In the following image, the popup shows the outgoing link from the argo-rollouts Service to the argo-rollouts Deployment (via the selector in the Service manifest). If a link is \"unfulfilled\", i.e., not referring to any object currently in the navigator, it is marked with a warning triangle, making it easy to identify broken resource links in your manifests: In this screenshot the rollouts-demo-root RoleBinding contains a reference to an rollouts-demo Role, which doesn't exist in the current manifests. Clicking on broken links will open the corresponding reference in the editor so you can easily fix it. Resource Filtering Resource filters allow you to filter the resources based on various properties such as: Name Kind Namespace Labels Annotations Click on the filter button on the top of the navigator to launch the dialog for configuration. Users can also add or remove filters by highlighting and hovering over labels, annotations or other metadata properties in the code editor: The Quick Filter popup is available with the Cmd+P keyboard shortcut: Reload Folder On Startup You can choose to reload the last reviewed folder while launching Monokle. For this purpose, you will have to navigate to the Settings and simply tick the Automatically Load Last Folder checkbox. Navigation History You can easily navigate back and forth between the selected resources with the help of the Navigation button. The highlight arrow will indicate when navigation to previous or next resource is available. Expand/Collapse Sections In the resource navigator, clicking on the section name will expand or collapse individual sections. Recent Projects The Recent Projects option has been added to the system menu to make it easy to switch between your favorite resource-manifest folders. Action: File > Recent Projects Supported Resource Links Monokle currently finds and visualizes the following links between Kubernetes resources - please let us know if we missed something or got it wrong! Resource Type Outgoing Link(s) identified Secret metadata.annotations.kubernetes.io/service-account.name => ServiceAccount metadata.name (optional) Service content.spec.selector => Deployment `spec.template.metadata.labels`` PodSpec in Deployment / Pod / DaemonSet / Job / StatefulSet / ReplicaSet / CronJob / ReplicationController ..configMapRef.name => ConfigMap metadata.name , ..configMapKeyRef.name => ConfigMap metadata.name , ..volumes[*].configMap.name => ConfigMap metadata.name , ..volumes[*].secret.secretMame => Secret metadata.name , ..secretKeyRef.name => Secret metadata.name , ..imagePullSecrets => Secret metadata.name , ..serviceAccountName => ServiceAccount metadata.name ServiceAccount ..secrets => Secret metadata.name PersistentVolume spec.claimRef.name => PersistentVolumeClaim metadata.name PersistentVolumeClaim spec.volumeName => PersistentVolume metadata.name Endpoints metadata.name => Service metadata.name ClusterRoleBinding roleRef.name => ClusterRole metadata.name RoleBinding roleRef.name => ClusterRoleBinding or Role metadata.name Ingress ..backend.service.name => Service metadata.name , ..resource.* => any object in same namespace","title":"Navigating Resources"},{"location":"resource-navigation/#navigating-resources","text":"","title":"Navigating Resources"},{"location":"resource-navigation/#resource-navigator","text":"The Navigator shows all resources found in the current project. Resources are grouped into sections/subsections based on their usage in Kubernetes. Selecting a resource automatically highlights both the file containing that resource and any other resourced linked to the selected one: In this screenshot: The argo-rollouts-metrics service is selected. The associated argo-rollouts-metrics-service.yaml file is highlighted to the left in the File Explorer. The linked argo-rollouts-metrics Deployment (via the selector in the Service manifest) is highlighted. The Service manifest is shown in the Editor to the right (with highlighting of the link to the Deployment on line 16).","title":"Resource Navigator"},{"location":"resource-navigation/#resource-links","text":"Links between resources are indicated by link icons to the left and right each resource name: Links to the left indicate there are incoming links to the resource. For example, a ConfigMap might have an incoming link from a Deployment. Links to the right indicate there are outgoing links from the resource. For example, a Service might have a selector that selects a Deployment. Hovering over a link icon will show a popup with all links (either incoming or outgoing) allowing you to click on a link to take you to that resource in the navigator. In the following image, the popup shows the outgoing link from the argo-rollouts Service to the argo-rollouts Deployment (via the selector in the Service manifest). If a link is \"unfulfilled\", i.e., not referring to any object currently in the navigator, it is marked with a warning triangle, making it easy to identify broken resource links in your manifests: In this screenshot the rollouts-demo-root RoleBinding contains a reference to an rollouts-demo Role, which doesn't exist in the current manifests. Clicking on broken links will open the corresponding reference in the editor so you can easily fix it.","title":"Resource Links"},{"location":"resource-navigation/#resource-filtering","text":"Resource filters allow you to filter the resources based on various properties such as: Name Kind Namespace Labels Annotations Click on the filter button on the top of the navigator to launch the dialog for configuration. Users can also add or remove filters by highlighting and hovering over labels, annotations or other metadata properties in the code editor: The Quick Filter popup is available with the Cmd+P keyboard shortcut:","title":"Resource Filtering"},{"location":"resource-navigation/#reload-folder-on-startup","text":"You can choose to reload the last reviewed folder while launching Monokle. For this purpose, you will have to navigate to the Settings and simply tick the Automatically Load Last Folder checkbox.","title":"Reload Folder On Startup"},{"location":"resource-navigation/#navigation-history","text":"You can easily navigate back and forth between the selected resources with the help of the Navigation button. The highlight arrow will indicate when navigation to previous or next resource is available.","title":"Navigation History"},{"location":"resource-navigation/#expandcollapse-sections","text":"In the resource navigator, clicking on the section name will expand or collapse individual sections.","title":"Expand/Collapse Sections"},{"location":"resource-navigation/#recent-projects","text":"The Recent Projects option has been added to the system menu to make it easy to switch between your favorite resource-manifest folders. Action: File > Recent Projects","title":"Recent Projects"},{"location":"resource-navigation/#supported-resource-links","text":"Monokle currently finds and visualizes the following links between Kubernetes resources - please let us know if we missed something or got it wrong! Resource Type Outgoing Link(s) identified Secret metadata.annotations.kubernetes.io/service-account.name => ServiceAccount metadata.name (optional) Service content.spec.selector => Deployment `spec.template.metadata.labels`` PodSpec in Deployment / Pod / DaemonSet / Job / StatefulSet / ReplicaSet / CronJob / ReplicationController ..configMapRef.name => ConfigMap metadata.name , ..configMapKeyRef.name => ConfigMap metadata.name , ..volumes[*].configMap.name => ConfigMap metadata.name , ..volumes[*].secret.secretMame => Secret metadata.name , ..secretKeyRef.name => Secret metadata.name , ..imagePullSecrets => Secret metadata.name , ..serviceAccountName => ServiceAccount metadata.name ServiceAccount ..secrets => Secret metadata.name PersistentVolume spec.claimRef.name => PersistentVolumeClaim metadata.name PersistentVolumeClaim spec.volumeName => PersistentVolume metadata.name Endpoints metadata.name => Service metadata.name ClusterRoleBinding roleRef.name => ClusterRole metadata.name RoleBinding roleRef.name => ClusterRoleBinding or Role metadata.name Ingress ..backend.service.name => Service metadata.name , ..resource.* => any object in same namespace","title":"Supported Resource Links"},{"location":"resource-validation/","text":"Validating Resources Monokle automatically validates all resources of the corresponding Kubernetes 1.22.1 schemas. In the Navigator, a resource which is not validated is shown with a red error icon. A resource with a broken link is shown with a yellow triangle. Inspecting Link and Syntax Validation Errors You will see the number of both link and syntax validation errors in resources at the top of the Navigator: Click on the yellow triangle to see a list of the broken links in the current resources: Click on the red circle to see a list of syntax errors in the current resources: Clicking on any item in the broken link or syntax error list will locate the file where the error exits in the Navigator and open the source in the Editor. This same functionality is available when the error icons are next to the file names in the Navigator: Hover on the error icon to check the error details and see the corresponding line in the Editor: Inspecting Policy Errors Monokle now integrates with the Open Policy Agent and is able to use Rego policies to validate your resources. This means that validation now goes beyond syntax validation and also ensures that semantics are correct. For example, you can enable a policy that ensures that images no longer use the latest tag. Let's have a look at how you would configure and remediate violations. When you look at the left sidebar, you will notice that a new icon is available for resource validation. Clicking on the icon will open a drawer: This is the new home for all modules related to validation. Continue by clicking on the Open Policy Agent integration and you will see a set of rules: Here you can familiarize yourself with the rules that are available. We recommend enabling all of them and afterwards disabling those that generate too much noice for your use cases. Great! Policy validation is now enabled. Policy errors have the same behavior as syntax errors. This means that you will see a red error icon appear whenever a violation is detected. After opening the resource in your editor, you will notice that the error is also marked in gutter and highlighted. Hovering over the error will show you help on how to remediate the violation. Use this information to directly edit your resource and the errors will disappear in real-time. Policy rules A big shout out to the DefSec team at Aqua Security as full credit for these rules goes to them. You can find the source of the Rego policies here . An overview of available rules: Rule Description Severity KSV001 Process can elevate its own privileges medium KSV002 Default AppArmor profile not set medium KSV003 Default capabilities not dropped low KSV005 SYS_ADMIN capability added high KSV006 hostPath volume mounted with docker.sock high KSV008 Access to host IPC namespace high KSV009 Access to host network high KSV010 Access to host PID high KSV011 CPU not limited low KSV012 Runs as root user medium KSV013 Image tag ':latest' used low KSV014 Root file system is not read-only low KSV015 CPU requests not specified low KSV016 Memory requests not specified low KSV017 Privileged container high KSV018 Memory not limited low KSV020 Runs with low user ID low KSV021 Runs with low group ID medium KSV023 hostPath volumes mounted medium KSV024 Access to host ports high KSV025 SELinux custom options set medium KSV027 Non-default /proc masks set medium KSV028 Non-ephemeral volume types used low KSV029 A root primary or supplementary GID set low KSV030 Default Seccomp profile not set low Policy validation FAQ How does it work? Under the hood, Rego policies are compiled to web assembly. Monokle uses the opa-wasm NPM module to load the policy and evaluate your resources in real-time. Can I use this with Helm and Kustomize? No, in this first release only vanilla Kubernetes resources are validated. Let us know if this is something you need by liking our related Helm and Kustomize GitHub issue. Can I use my own Rego policies? No, currently only a set of preconfigured rules is available. We are considering policy plugins or an OPA Gatekeeper integration , feel free to let us know if this is something you'd like!","title":"Validating Resources"},{"location":"resource-validation/#validating-resources","text":"Monokle automatically validates all resources of the corresponding Kubernetes 1.22.1 schemas. In the Navigator, a resource which is not validated is shown with a red error icon. A resource with a broken link is shown with a yellow triangle.","title":"Validating Resources"},{"location":"resource-validation/#inspecting-link-and-syntax-validation-errors","text":"You will see the number of both link and syntax validation errors in resources at the top of the Navigator: Click on the yellow triangle to see a list of the broken links in the current resources: Click on the red circle to see a list of syntax errors in the current resources: Clicking on any item in the broken link or syntax error list will locate the file where the error exits in the Navigator and open the source in the Editor. This same functionality is available when the error icons are next to the file names in the Navigator: Hover on the error icon to check the error details and see the corresponding line in the Editor:","title":"Inspecting Link and Syntax Validation Errors"},{"location":"resource-validation/#inspecting-policy-errors","text":"Monokle now integrates with the Open Policy Agent and is able to use Rego policies to validate your resources. This means that validation now goes beyond syntax validation and also ensures that semantics are correct. For example, you can enable a policy that ensures that images no longer use the latest tag. Let's have a look at how you would configure and remediate violations. When you look at the left sidebar, you will notice that a new icon is available for resource validation. Clicking on the icon will open a drawer: This is the new home for all modules related to validation. Continue by clicking on the Open Policy Agent integration and you will see a set of rules: Here you can familiarize yourself with the rules that are available. We recommend enabling all of them and afterwards disabling those that generate too much noice for your use cases. Great! Policy validation is now enabled. Policy errors have the same behavior as syntax errors. This means that you will see a red error icon appear whenever a violation is detected. After opening the resource in your editor, you will notice that the error is also marked in gutter and highlighted. Hovering over the error will show you help on how to remediate the violation. Use this information to directly edit your resource and the errors will disappear in real-time.","title":"Inspecting Policy Errors"},{"location":"resource-validation/#policy-rules","text":"A big shout out to the DefSec team at Aqua Security as full credit for these rules goes to them. You can find the source of the Rego policies here . An overview of available rules: Rule Description Severity KSV001 Process can elevate its own privileges medium KSV002 Default AppArmor profile not set medium KSV003 Default capabilities not dropped low KSV005 SYS_ADMIN capability added high KSV006 hostPath volume mounted with docker.sock high KSV008 Access to host IPC namespace high KSV009 Access to host network high KSV010 Access to host PID high KSV011 CPU not limited low KSV012 Runs as root user medium KSV013 Image tag ':latest' used low KSV014 Root file system is not read-only low KSV015 CPU requests not specified low KSV016 Memory requests not specified low KSV017 Privileged container high KSV018 Memory not limited low KSV020 Runs with low user ID low KSV021 Runs with low group ID medium KSV023 hostPath volumes mounted medium KSV024 Access to host ports high KSV025 SELinux custom options set medium KSV027 Non-default /proc masks set medium KSV028 Non-ephemeral volume types used low KSV029 A root primary or supplementary GID set low KSV030 Default Seccomp profile not set low","title":"Policy rules"},{"location":"resource-validation/#policy-validation-faq","text":"How does it work? Under the hood, Rego policies are compiled to web assembly. Monokle uses the opa-wasm NPM module to load the policy and evaluate your resources in real-time. Can I use this with Helm and Kustomize? No, in this first release only vanilla Kubernetes resources are validated. Let us know if this is something you need by liking our related Helm and Kustomize GitHub issue. Can I use my own Rego policies? No, currently only a set of preconfigured rules is available. We are considering policy plugins or an OPA Gatekeeper integration , feel free to let us know if this is something you'd like!","title":"Policy validation FAQ"},{"location":"source-editor/","text":"Using the Source Editor Source Editor The right-most panel of the Monokle application is the Source Editor: Selecting either a file or resource in the Navigator will show its contents in the Source Editor. The editor will syntax-highlight for YAML and provide context-sensitive help and auto-complete functionality for standard Kubernetes objects. Right-clicking in the editor shows a list of available commands. Pressing F1 opens its command-palette:","title":"Using the Source Editor"},{"location":"source-editor/#using-the-source-editor","text":"","title":"Using the Source Editor"},{"location":"source-editor/#source-editor","text":"The right-most panel of the Monokle application is the Source Editor: Selecting either a file or resource in the Navigator will show its contents in the Source Editor. The editor will syntax-highlight for YAML and provide context-sensitive help and auto-complete functionality for standard Kubernetes objects. Right-clicking in the editor shows a list of available commands. Pressing F1 opens its command-palette:","title":"Source Editor"},{"location":"telemetry/","text":"Telemetry To improve the end-user experience, Monokle collects telemetry data. Participation in this program is optional, and you may opt-out if you'd prefer not to share any information. The data collected is always anonymous, not traceable to the source, and only used in aggregate form. You can learn more about how we treat your data by reading our privacy statement . What We Collect Statistics tracked include: The number of downloads. Error reports - Information about unexpected, often problematic issues, which allows us to fix them. Usage Data - How features are used in Monokle, which helps us to define next steps and prioritise features. How to Opt Out To opt out of the Monokle analytics collection: Click on the blue gear icon at the top right of the Monokle screen: Open Settings . Click on Global Setttings . Go to Telemetry section and uncheck the boxes of the type of event(s) you'd like to opt-out. To check the current collection status: 1. Click on the blue gear icon: Open Settings . 2. Click on Global Setttings . 3. Go to Telemetry section and verify the state of the checkboxes.","title":"Telemetry"},{"location":"telemetry/#telemetry","text":"To improve the end-user experience, Monokle collects telemetry data. Participation in this program is optional, and you may opt-out if you'd prefer not to share any information. The data collected is always anonymous, not traceable to the source, and only used in aggregate form. You can learn more about how we treat your data by reading our privacy statement .","title":"Telemetry"},{"location":"telemetry/#what-we-collect","text":"Statistics tracked include: The number of downloads. Error reports - Information about unexpected, often problematic issues, which allows us to fix them. Usage Data - How features are used in Monokle, which helps us to define next steps and prioritise features.","title":"What We Collect"},{"location":"telemetry/#how-to-opt-out","text":"To opt out of the Monokle analytics collection: Click on the blue gear icon at the top right of the Monokle screen: Open Settings . Click on Global Setttings . Go to Telemetry section and uncheck the boxes of the type of event(s) you'd like to opt-out. To check the current collection status: 1. Click on the blue gear icon: Open Settings . 2. Click on Global Setttings . 3. Go to Telemetry section and verify the state of the checkboxes.","title":"How to Opt Out"},{"location":"templates/","text":"What is a Monokle Template? A Monokle Template is a mechanism for creating visual forms and interpolating the data from those forms into one or multiple manifests. For each form, we must define the JSON schema of the data to use as an input and a UI-schema for customizing the visuals of the forms (for example, specifying which widgets should be used). Monokle uses the React-Schema-Form component to render template forms for the provided schemas, read more in their documentation on how to further work with forms, schemas and ui-schemas. Any folder that contains a monokle-template.json file can be a template. What is the structure of monokle-template.json for a valid Monokle Template? Here\u2019s an example of a template that creates a Pod: https://github.com/kubeshop/monokle-default-templates-plugin/blob/main/basic-pod-template/monokle-template.json { \"name\" : \"Basic Kubernetes Pod\" , \"id\" : \"io.kubeshop.monokle.templates.default.basic-pod-template\" , \"author\" : \"kubeshop.io\" , \"version\" : \"1.0.0\" , \"description\" : \"Creates a Pod for a specified Image\" , \"repository\" : \"\" , \"type\" : \"vanilla\" , \"forms\" : [ { \"name\" : \"Pod Settings\" , \"description\" : \"Specify the Image to use\" , \"schema\" : \"form-schema.json\" , \"uiSchema\" : \"form-ui-schema.json\" } ], \"manifests\" : [ { \"filePath\" : \"template.yaml\" } ], \"resultMessage\" : \"Pod resource created successfully!\" , \"helpUrl\" : \"https://github.com/kubeshop/monokle-default-templates-plugin\" } The name , id , author , version , description , type and forms properties are required. All types of templates have these properties. In the above example, the type of the template is \"vanilla\" . What does a form schema look like? The format of form schemas is JSON schema . This defines which data that will be sent to the template manifests. { \"type\" : \"object\" , \"required\" : [ \"name\" , \"image\" ], \"properties\" : { \"name\" : { \"type\" : \"string\" , \"default\" : \"my-pod\" }, \"namespace\" : { \"type\" : \"string\" }, \"image\" : { \"type\" : \"string\" } } } What does a form UI schema look like? Example: { \"name\" : { \"ui:title\" : \"Name\" , \"ui:help\" : \"The name of the Pod\" }, \"namespace\" : { \"ui:title\" : \"Namespace\" , \"ui:help\" : \"The target namespace for the Pod\" , \"ui:widget\" : \"namespaceSelection\" }, \"image\" : { \"ui:title\" : \"Image\" , \"ui:help\" : \"The image name to use for the Pod, for example nginx-ingress:latest\" } } The role of this form is to specify information about how to render the form - read more about ui-schemas in the UI-Schema Documentation Custom Form Widgets Monokle 1.5.0 provides a number of custom form widgets to provide a better user experience: namespaceSelection : Shows a dropdown with all namespaces in the current set of resources. apiGroupSelection : Shows a dropdown with all apiGroups known by Monokle. podSelectSelection : Shows a dropdown with all labels assigned to any pods or pod-specs in the current set of resources. resourceSelection : Shows a dropdown with resource names from the current set of resources. This can be narrowed down by adding a ui:options.resourceKinds property containing a |-separated string of desired resourceKinds. For example: { \"targetClusterRole\" : { \"ui:title\" : \"Target ClusterRole\" , \"ui:help\" : \"The ClusterRole to bind to the created ServiceAccount\" , \"ui:widget\" : \"resourceSelection\" , \"ui:options\" : { \"resourceKinds\" : \"ClusterRole\" } } } All these widgets allow entry of custom values - i.e. none require you to select a known value. Property Interpolation Monokle uses [[ and ]] as escape delimiters for script interpolation. For the JSON Schema example above example, if this form is the first one in the forms array from monokle-template.json , then we will be able to use the values in the template manifests: propertyOne : [[ forms [ 0 ] .name ]] propertyTwo : [[ forms [ 0 ] .namespace ]] otherProperty : [[ forms [ 0 ] .image ]] Scripts are run in a sandboxed environment giving you access to built-in Javascript objects. For example the following is taken from the basic-role-template which will create a YAML array of selected verbs in the corresponding form. verbs : - [[ forms [ 0 ] .verbs.join(\"\\n - \") ]] What types of templates exist? Monokle 1.5.0 introduces vanilla templates and referenced Helm Chart templates. Vanilla Templates The type property from monokle-template.json is \"vanilla\". In vanilla templates, we must provide the manifests that will be generated as an output. For example, here is a simple template manifest example: deployment.yaml apiVersion : apps/v1 metadata : kind : Deployment name : [[ forms [ 0 ] .name ]] The [[forms[0].name]] parameter will be interpolated based on the input received from the form. In this specific example, the value of the name property from the first form will be inserted. Using the manifests property from the monokle-template file, specify the above template manifest like this: { \"manifests\" : [ { \"filePath\" : \"deployment.yaml\" } ] } Referenced Helm Chart Templates The value of the type property from monokle-template.json is \"helm-chart\" . Example of monokle-template.json : { \"name\" : \"Minecraft Server (Test Plugin)\" , \"id\" : \"com.github.devcatalin.monokle-test-plugin.minecraft\" , \"author\" : \"Catalin\" , \"version\" : \"1.0.1\" , \"description\" : \"Create your own Minecraft server\" , \"type\" : \"helm-chart\" , \"forms\" : [ { \"name\" : \"Minecraft Server\" , \"description\" : \"Default settings for your Minecraft Server\" , \"schema\" : \"form-schema.json\" , \"uiSchema\" : \"form-ui-schema.json\" } ], \"valuesFilePath\" : \"values.yaml\" , \"chartName\" : \"minecraft\" , \"chartVersion\" : \"3.6.1\" , \"chartRepo\" : \"https://itzg.github.io/minecraft-server-charts/\" , \"helpUrl\" : \"https://artifacthub.io/packages/helm/minecraft-server-charts/minecraft\" } In this example, we can see the first part of the file looks similar to the vanilla templates. However, for Helm chart templates we do not specify a manifests array, we specify information about the chart. The properties chartName , chartVersion , chartRepo are required to identify the helm chart. This type of template must bundle a values.yaml file that can contain properties that will be interpolated with values from the forms. For example, we could have the following values.yaml in the template folder: values.yaml version : [[ forms [ 0 ] .version ]] maxPlayers : [[ forms [ 0 ] .maxPlayers ]] In the monokle-template.json example from above, we notice a valuesFilePath that specifies the path to the values file. This file will be interpolated with values from the forms and used by Helm to generate the output resources. How do I install a Template? Templates can be installed via Plugins. Read the How to install a Plugin section from Plugins Overview . Note: A plugin can contain one or multiple templates. Default Monokle Templates Monokle includes a default set of templates which are installed automatically when starting Monokle for the first time and available in the Templates Explorer when working with your Monokle projects: Check out the Monokle Default Templates Plugin repository to see which templates that are included and their corresponding schemas and manifests.","title":"Templates"},{"location":"templates/#what-is-a-monokle-template","text":"A Monokle Template is a mechanism for creating visual forms and interpolating the data from those forms into one or multiple manifests. For each form, we must define the JSON schema of the data to use as an input and a UI-schema for customizing the visuals of the forms (for example, specifying which widgets should be used). Monokle uses the React-Schema-Form component to render template forms for the provided schemas, read more in their documentation on how to further work with forms, schemas and ui-schemas. Any folder that contains a monokle-template.json file can be a template.","title":"What is a Monokle Template?"},{"location":"templates/#what-is-the-structure-of-monokle-templatejson-for-a-valid-monokle-template","text":"Here\u2019s an example of a template that creates a Pod: https://github.com/kubeshop/monokle-default-templates-plugin/blob/main/basic-pod-template/monokle-template.json { \"name\" : \"Basic Kubernetes Pod\" , \"id\" : \"io.kubeshop.monokle.templates.default.basic-pod-template\" , \"author\" : \"kubeshop.io\" , \"version\" : \"1.0.0\" , \"description\" : \"Creates a Pod for a specified Image\" , \"repository\" : \"\" , \"type\" : \"vanilla\" , \"forms\" : [ { \"name\" : \"Pod Settings\" , \"description\" : \"Specify the Image to use\" , \"schema\" : \"form-schema.json\" , \"uiSchema\" : \"form-ui-schema.json\" } ], \"manifests\" : [ { \"filePath\" : \"template.yaml\" } ], \"resultMessage\" : \"Pod resource created successfully!\" , \"helpUrl\" : \"https://github.com/kubeshop/monokle-default-templates-plugin\" } The name , id , author , version , description , type and forms properties are required. All types of templates have these properties. In the above example, the type of the template is \"vanilla\" .","title":"What is the structure of monokle-template.json for a valid Monokle Template?"},{"location":"templates/#what-does-a-form-schema-look-like","text":"The format of form schemas is JSON schema . This defines which data that will be sent to the template manifests. { \"type\" : \"object\" , \"required\" : [ \"name\" , \"image\" ], \"properties\" : { \"name\" : { \"type\" : \"string\" , \"default\" : \"my-pod\" }, \"namespace\" : { \"type\" : \"string\" }, \"image\" : { \"type\" : \"string\" } } }","title":"What does a form schema look like?"},{"location":"templates/#what-does-a-form-ui-schema-look-like","text":"Example: { \"name\" : { \"ui:title\" : \"Name\" , \"ui:help\" : \"The name of the Pod\" }, \"namespace\" : { \"ui:title\" : \"Namespace\" , \"ui:help\" : \"The target namespace for the Pod\" , \"ui:widget\" : \"namespaceSelection\" }, \"image\" : { \"ui:title\" : \"Image\" , \"ui:help\" : \"The image name to use for the Pod, for example nginx-ingress:latest\" } } The role of this form is to specify information about how to render the form - read more about ui-schemas in the UI-Schema Documentation","title":"What does a form UI schema look like?"},{"location":"templates/#custom-form-widgets","text":"Monokle 1.5.0 provides a number of custom form widgets to provide a better user experience: namespaceSelection : Shows a dropdown with all namespaces in the current set of resources. apiGroupSelection : Shows a dropdown with all apiGroups known by Monokle. podSelectSelection : Shows a dropdown with all labels assigned to any pods or pod-specs in the current set of resources. resourceSelection : Shows a dropdown with resource names from the current set of resources. This can be narrowed down by adding a ui:options.resourceKinds property containing a |-separated string of desired resourceKinds. For example: { \"targetClusterRole\" : { \"ui:title\" : \"Target ClusterRole\" , \"ui:help\" : \"The ClusterRole to bind to the created ServiceAccount\" , \"ui:widget\" : \"resourceSelection\" , \"ui:options\" : { \"resourceKinds\" : \"ClusterRole\" } } } All these widgets allow entry of custom values - i.e. none require you to select a known value.","title":"Custom Form Widgets"},{"location":"templates/#property-interpolation","text":"Monokle uses [[ and ]] as escape delimiters for script interpolation. For the JSON Schema example above example, if this form is the first one in the forms array from monokle-template.json , then we will be able to use the values in the template manifests: propertyOne : [[ forms [ 0 ] .name ]] propertyTwo : [[ forms [ 0 ] .namespace ]] otherProperty : [[ forms [ 0 ] .image ]] Scripts are run in a sandboxed environment giving you access to built-in Javascript objects. For example the following is taken from the basic-role-template which will create a YAML array of selected verbs in the corresponding form. verbs : - [[ forms [ 0 ] .verbs.join(\"\\n - \") ]]","title":"Property Interpolation"},{"location":"templates/#what-types-of-templates-exist","text":"Monokle 1.5.0 introduces vanilla templates and referenced Helm Chart templates.","title":"What types of templates exist?"},{"location":"templates/#vanilla-templates","text":"The type property from monokle-template.json is \"vanilla\". In vanilla templates, we must provide the manifests that will be generated as an output. For example, here is a simple template manifest example: deployment.yaml apiVersion : apps/v1 metadata : kind : Deployment name : [[ forms [ 0 ] .name ]] The [[forms[0].name]] parameter will be interpolated based on the input received from the form. In this specific example, the value of the name property from the first form will be inserted. Using the manifests property from the monokle-template file, specify the above template manifest like this: { \"manifests\" : [ { \"filePath\" : \"deployment.yaml\" } ] }","title":"Vanilla Templates"},{"location":"templates/#referenced-helm-chart-templates","text":"The value of the type property from monokle-template.json is \"helm-chart\" . Example of monokle-template.json : { \"name\" : \"Minecraft Server (Test Plugin)\" , \"id\" : \"com.github.devcatalin.monokle-test-plugin.minecraft\" , \"author\" : \"Catalin\" , \"version\" : \"1.0.1\" , \"description\" : \"Create your own Minecraft server\" , \"type\" : \"helm-chart\" , \"forms\" : [ { \"name\" : \"Minecraft Server\" , \"description\" : \"Default settings for your Minecraft Server\" , \"schema\" : \"form-schema.json\" , \"uiSchema\" : \"form-ui-schema.json\" } ], \"valuesFilePath\" : \"values.yaml\" , \"chartName\" : \"minecraft\" , \"chartVersion\" : \"3.6.1\" , \"chartRepo\" : \"https://itzg.github.io/minecraft-server-charts/\" , \"helpUrl\" : \"https://artifacthub.io/packages/helm/minecraft-server-charts/minecraft\" } In this example, we can see the first part of the file looks similar to the vanilla templates. However, for Helm chart templates we do not specify a manifests array, we specify information about the chart. The properties chartName , chartVersion , chartRepo are required to identify the helm chart. This type of template must bundle a values.yaml file that can contain properties that will be interpolated with values from the forms. For example, we could have the following values.yaml in the template folder: values.yaml version : [[ forms [ 0 ] .version ]] maxPlayers : [[ forms [ 0 ] .maxPlayers ]] In the monokle-template.json example from above, we notice a valuesFilePath that specifies the path to the values file. This file will be interpolated with values from the forms and used by Helm to generate the output resources.","title":"Referenced Helm Chart Templates"},{"location":"templates/#how-do-i-install-a-template","text":"Templates can be installed via Plugins. Read the How to install a Plugin section from Plugins Overview . Note: A plugin can contain one or multiple templates.","title":"How do I install a Template?"},{"location":"templates/#default-monokle-templates","text":"Monokle includes a default set of templates which are installed automatically when starting Monokle for the first time and available in the Templates Explorer when working with your Monokle projects: Check out the Monokle Default Templates Plugin repository to see which templates that are included and their corresponding schemas and manifests.","title":"Default Monokle Templates"},{"location":"testing/","text":"Testing Monokle tests are written with Playwright . Run Tests First create a build to run the tests npm run electron:build To run specific tests npm run ui-test -- tests/<filename>.test.ts To run all the tests npm run ui-test Write & Extend Tests To start writing tests first create a build(tests are run against the build which will be published), any changes made to the source code, adding identifiers, changing logic will need a new build for those changes to be in the tests npm run electron:build The startApp() function should be called and that will start a new monokle instance with the automation flag set. More examples of tests can be found in the ./tests folder The automation flag is used to change some handlers which cannot be automated by playwright since they are open by the specific OS's Models should contain most of the logic, we can think of models a mirror for some components in the app with some logic and identifiers for certain elements. Having most of the logic in the models can help with reusing most of the logic we have around tests and more lightweight tests. Overriding OS Actions To change handlers such as dialog.showOpenDialogSync the function getChannelName('channel-name') should be called when creating a new handler on ipcRenderer , this will create different handler just for automation. To add a new handler in automation something like this is required: const name = 'some-value'; const chanel = getChannelName('channel-name', true); await electronApp.evaluate(({ ipcMain }, params) => { ipcMain.handle(params.chanel, () => { return [params.name]; }); }, { chanel, name }); Examples: override in electron override in tests","title":"Testing"},{"location":"testing/#testing","text":"Monokle tests are written with Playwright .","title":"Testing"},{"location":"testing/#run-tests","text":"First create a build to run the tests npm run electron:build To run specific tests npm run ui-test -- tests/<filename>.test.ts To run all the tests npm run ui-test","title":"Run Tests"},{"location":"testing/#write-extend-tests","text":"To start writing tests first create a build(tests are run against the build which will be published), any changes made to the source code, adding identifiers, changing logic will need a new build for those changes to be in the tests npm run electron:build The startApp() function should be called and that will start a new monokle instance with the automation flag set. More examples of tests can be found in the ./tests folder The automation flag is used to change some handlers which cannot be automated by playwright since they are open by the specific OS's Models should contain most of the logic, we can think of models a mirror for some components in the app with some logic and identifiers for certain elements. Having most of the logic in the models can help with reusing most of the logic we have around tests and more lightweight tests.","title":"Write &amp; Extend Tests"},{"location":"testing/#overriding-os-actions","text":"To change handlers such as dialog.showOpenDialogSync the function getChannelName('channel-name') should be called when creating a new handler on ipcRenderer , this will create different handler just for automation. To add a new handler in automation something like this is required: const name = 'some-value'; const chanel = getChannelName('channel-name', true); await electronApp.evaluate(({ ipcMain }, params) => { ipcMain.handle(params.chanel, () => { return [params.name]; }); }, { chanel, name }); Examples: override in electron override in tests","title":"Overriding OS Actions"},{"location":"tutorials/how-to-browse-clusters/","text":"How to Browse Clusters In this Monokle tutorial, we will illustrate the steps to connect to a cluster and navigate/update contained resources. Let\u2019s get started! 1. Configure a Cluster Launch Monokle and ensure that the setting Show Cluster Selector box is checked. If this is the first time to configure a cluster in Monokle, you will see No Cluster Configured and the Configure button at the top of the screen: Clicking the Configure button opens the widget to specify the cluster to load by inserting its location: After clusters are configured, select the cluster you wish to work with from the drop down list at the top of the screen and click Load . Monokle will switch to the Cluster Mode , and the Navigator will reflect all the resources retrieved from the configured cluster. 2. Navigate/Select Resources Select a resource to view its source code in the Editor. Editing resources in cluster mode allows quick changes to be made and deployed back to the cluster. 3. Diff Changes Against Cluster Click the Diff button to analyze and compare the selected resource against the currently configured cluster. The comparison table will look like this: 4. Deploy Changes Click on the Deploy button to update the resource to the currently configured cluster. Then select the namespace for deployment. Select an existing namespace from the cluster, create a new namespace, or don't specify a namespace at all. By selecting None , Deploy will use the namespaces declared in the resources. The resource deployed dialog will be shown in the top-right corner of the console. 5. Exit Cluster Mode Click on the Exit button on the top-right corner of the console to restore the resources of the currently selected folder. Questions or Comments? Please feel free to join our open source community on Discord with this Invite Link and start your discussion.","title":"How to Browse Clusters"},{"location":"tutorials/how-to-browse-clusters/#how-to-browse-clusters","text":"In this Monokle tutorial, we will illustrate the steps to connect to a cluster and navigate/update contained resources. Let\u2019s get started!","title":"How to Browse Clusters"},{"location":"tutorials/how-to-browse-clusters/#1-configure-a-cluster","text":"Launch Monokle and ensure that the setting Show Cluster Selector box is checked. If this is the first time to configure a cluster in Monokle, you will see No Cluster Configured and the Configure button at the top of the screen: Clicking the Configure button opens the widget to specify the cluster to load by inserting its location: After clusters are configured, select the cluster you wish to work with from the drop down list at the top of the screen and click Load . Monokle will switch to the Cluster Mode , and the Navigator will reflect all the resources retrieved from the configured cluster.","title":"1. Configure a Cluster"},{"location":"tutorials/how-to-browse-clusters/#2-navigateselect-resources","text":"Select a resource to view its source code in the Editor. Editing resources in cluster mode allows quick changes to be made and deployed back to the cluster.","title":"2. Navigate/Select Resources"},{"location":"tutorials/how-to-browse-clusters/#3-diff-changes-against-cluster","text":"Click the Diff button to analyze and compare the selected resource against the currently configured cluster. The comparison table will look like this:","title":"3. Diff Changes Against Cluster"},{"location":"tutorials/how-to-browse-clusters/#4-deploy-changes","text":"Click on the Deploy button to update the resource to the currently configured cluster. Then select the namespace for deployment. Select an existing namespace from the cluster, create a new namespace, or don't specify a namespace at all. By selecting None , Deploy will use the namespaces declared in the resources. The resource deployed dialog will be shown in the top-right corner of the console.","title":"4. Deploy Changes"},{"location":"tutorials/how-to-browse-clusters/#5-exit-cluster-mode","text":"Click on the Exit button on the top-right corner of the console to restore the resources of the currently selected folder.","title":"5. Exit Cluster Mode"},{"location":"tutorials/how-to-browse-clusters/#questions-or-comments","text":"Please feel free to join our open source community on Discord with this Invite Link and start your discussion.","title":"Questions or Comments?"},{"location":"tutorials/how-to-configure-monokle/","text":"How to Configure Monokle In this tutorial, we will show the steps to configure the Monokle Environment. Note: All settings are initialised with default values - there is no immediate need to change them. Let\u2019s get started! 1. Open Settings Launch Monokle and click on the Settings button to access the Settings widget: 2. Set kubeconfig Enter the kubeconfig file path in the KUBECONFIG text field. The kubeconfig parameter is used when viewing cluster resources and deploying/diffing local resources to a cluster. Alternatively, you can click on the Browse button to fetch the kubeconfig file for configuring cluster access. Select the required folder to configure the cluster. Note: The kubectl command-line tool uses kubeconfig files to find the information for choosing a cluster and communicating with the API server. 3. Files: Include Monokle will look for Kubernetes manifests in files matching this filter, by default this is set to .yaml/ .yml files. Click on the Add Pattern button to include the files having the corresponding extension. Enter the extension pattern in the Files Include textbox and click OK . 4. Files: Exclude Monokle will ignore files/folders matching any of the specified paths, even if they match an above inclusion pattern. Click on the Add Pattern button to exclude the files having the corresponding extension. For example, node_modules. Enter the extension pattern in the Files Exclude textbox and hit the OK button. 5. Helm Preview Mode Click on the Helm Preview Mode dropdown to select any of the viewing states. The options for preview: Template - To use the Helm Template command Install - To use the Helm Install command 6. On Startup Tick the Automatically Load Last Folder checkbox to reload the last reviewed folder when launching Monokle. Questions or Comments? Please feel free to join our open source community on Discord with this Invite Link and start your discussion.","title":"How to Configure Monokle"},{"location":"tutorials/how-to-configure-monokle/#how-to-configure-monokle","text":"In this tutorial, we will show the steps to configure the Monokle Environment. Note: All settings are initialised with default values - there is no immediate need to change them. Let\u2019s get started!","title":"How to Configure Monokle"},{"location":"tutorials/how-to-configure-monokle/#1-open-settings","text":"Launch Monokle and click on the Settings button to access the Settings widget:","title":"1. Open Settings"},{"location":"tutorials/how-to-configure-monokle/#2-set-kubeconfig","text":"Enter the kubeconfig file path in the KUBECONFIG text field. The kubeconfig parameter is used when viewing cluster resources and deploying/diffing local resources to a cluster. Alternatively, you can click on the Browse button to fetch the kubeconfig file for configuring cluster access. Select the required folder to configure the cluster. Note: The kubectl command-line tool uses kubeconfig files to find the information for choosing a cluster and communicating with the API server.","title":"2. Set kubeconfig"},{"location":"tutorials/how-to-configure-monokle/#3-files-include","text":"Monokle will look for Kubernetes manifests in files matching this filter, by default this is set to .yaml/ .yml files. Click on the Add Pattern button to include the files having the corresponding extension. Enter the extension pattern in the Files Include textbox and click OK .","title":"3. Files: Include"},{"location":"tutorials/how-to-configure-monokle/#4-files-exclude","text":"Monokle will ignore files/folders matching any of the specified paths, even if they match an above inclusion pattern. Click on the Add Pattern button to exclude the files having the corresponding extension. For example, node_modules. Enter the extension pattern in the Files Exclude textbox and hit the OK button.","title":"4. Files: Exclude"},{"location":"tutorials/how-to-configure-monokle/#5-helm-preview-mode","text":"Click on the Helm Preview Mode dropdown to select any of the viewing states. The options for preview: Template - To use the Helm Template command Install - To use the Helm Install command","title":"5. Helm Preview Mode"},{"location":"tutorials/how-to-configure-monokle/#6-on-startup","text":"Tick the Automatically Load Last Folder checkbox to reload the last reviewed folder when launching Monokle.","title":"6. On Startup"},{"location":"tutorials/how-to-configure-monokle/#questions-or-comments","text":"Please feel free to join our open source community on Discord with this Invite Link and start your discussion.","title":"Questions or Comments?"},{"location":"tutorials/how-to-create-and-edit-configmap/","text":"How to Work with the Form Editor In this Monokle tutorial, we will illustrate how to create and edit Form resources to store non-confidential data in key-value pairs. Let\u2019s get started! Launch Monokle Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Launch Monokle and, on the welcome screen, there are three options to start working with projects: Select an exisiting folder. Create an empty project. Start from a template. Click Select an existing project to add your project folder containing K8 resources. Select Folder Select your folder to parse its manifest in the file explorer. In the file explorer, you can view manifests, including their resources and their relationships. Select Manifests Scroll up and down to navigate and select the required manifests. Once you select a manifest, its related resources will be highlighted automatically in the navigator. Create a New Resource Click on the Add button (plus sign) in the Navigator to launch the Add New Resource dialog for creating resources. At the bottom of the dialog, you can select the option to: - Save to folder. - Add to file. - Don't save. Use the Source Editor Step 1: Navigate and select the resource in the Navigator. Once you select a resource, its source code will be launched automatically in the Source Editor. The Source Editor allows you to view and edit the source code easily. Step 2: Right click anywhere in the Source Editor to launch the menu to select the required editing option from the drop-down list. You can also edit the source code using the Form Editor, which does not require any coding effort. Using the Form Editor The Form Editor collects the required information and passes it to another entity. To launch the ConfigMap Editor, click on the Form button. For Configuration Data Step 1: Click on the Add Item button to create a new text field for data configuration. Step 2: Enter the text configuration data in key-value pair fields. Note: You can also edit the existing data in the key-value pair fields. For Binary Configuration Data Step 1: Click on the Add Item button to create a new binary data field for binary data configuration. Step 2: Enter the binary configuration data in key-value pair fields. Note: You can also edit the existing binary configuration data in the fields. Step 3: Tick the Immutable checkbox to ensure the data stored in the ConfigMap is not updated. Using the Object Metadata Editor To launch the Metadata Editor, click on the Metadata button. For editing object metadata, you need to provide a specific name, namespace, annotations, labels, cluster name, generate name, and finalizers to uniquely identify the object. Name Step 1: Enter the specific key name in the name field to give a unique identity to the object. Note: The name of the ConfigMap must be unique within a namespace. Namespace Step 1: Enter namespace in the namespace field to organize clusters into virtual sub-clusters. Note: Provide a unique namespace within the ConfigMap. If left empty, the default namespace value shall be assigned automatically. Annotations Step 1: Click on the Add Item button to create the new key-value field for annotations. Step 2: Enter the arbitrary metadata in key-value pair fields. Note: You can also edit the existing arbitrary metadata data in the fields. Labels Step 1: Click on Add Item button to create the new key-value field for labels. Step 2: Enter the label's details in the key-value pair field. Note: You also can edit existing label data in the fields. Cluster Name Enter the name of the cluster in the Cluster Name field to which the object belongs. Generate Name Enter a prefix in the Generate Name field. Note: You can also edit the existing data in the Generate Name field. Finalizers Step 1: Click on the Add Item button to create the new finalizer field. Step 2: Enter the finalizer in the finalizers field. Note: You also can edit the existing data in the finalizer fields. Kubernetes is prompted to wait until specific conditions are met before it fully deletes resources marked for deletion. Note: Finalizer must be empty before the object is deleted from the registry. The source editor provides autocomplete and autosave options to automatically save your edits. Questions or Comments? Please feel free to join our open source community on Discord with this Invite Link and start your discussion.","title":"How to Work with the Form Editor"},{"location":"tutorials/how-to-create-and-edit-configmap/#how-to-work-with-the-form-editor","text":"In this Monokle tutorial, we will illustrate how to create and edit Form resources to store non-confidential data in key-value pairs. Let\u2019s get started!","title":"How to Work with the Form Editor"},{"location":"tutorials/how-to-create-and-edit-configmap/#launch-monokle","text":"Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Launch Monokle and, on the welcome screen, there are three options to start working with projects: Select an exisiting folder. Create an empty project. Start from a template. Click Select an existing project to add your project folder containing K8 resources.","title":"Launch Monokle"},{"location":"tutorials/how-to-create-and-edit-configmap/#select-folder","text":"Select your folder to parse its manifest in the file explorer. In the file explorer, you can view manifests, including their resources and their relationships.","title":"Select Folder"},{"location":"tutorials/how-to-create-and-edit-configmap/#select-manifests","text":"Scroll up and down to navigate and select the required manifests. Once you select a manifest, its related resources will be highlighted automatically in the navigator.","title":"Select Manifests"},{"location":"tutorials/how-to-create-and-edit-configmap/#create-a-new-resource","text":"Click on the Add button (plus sign) in the Navigator to launch the Add New Resource dialog for creating resources. At the bottom of the dialog, you can select the option to: - Save to folder. - Add to file. - Don't save.","title":"Create a New Resource"},{"location":"tutorials/how-to-create-and-edit-configmap/#use-the-source-editor","text":"Step 1: Navigate and select the resource in the Navigator. Once you select a resource, its source code will be launched automatically in the Source Editor. The Source Editor allows you to view and edit the source code easily. Step 2: Right click anywhere in the Source Editor to launch the menu to select the required editing option from the drop-down list. You can also edit the source code using the Form Editor, which does not require any coding effort.","title":"Use the Source Editor"},{"location":"tutorials/how-to-create-and-edit-configmap/#using-the-form-editor","text":"The Form Editor collects the required information and passes it to another entity. To launch the ConfigMap Editor, click on the Form button.","title":"Using the Form Editor"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-configuration-data","text":"Step 1: Click on the Add Item button to create a new text field for data configuration. Step 2: Enter the text configuration data in key-value pair fields. Note: You can also edit the existing data in the key-value pair fields.","title":"For Configuration Data"},{"location":"tutorials/how-to-create-and-edit-configmap/#for-binary-configuration-data","text":"Step 1: Click on the Add Item button to create a new binary data field for binary data configuration. Step 2: Enter the binary configuration data in key-value pair fields. Note: You can also edit the existing binary configuration data in the fields. Step 3: Tick the Immutable checkbox to ensure the data stored in the ConfigMap is not updated.","title":"For Binary Configuration Data"},{"location":"tutorials/how-to-create-and-edit-configmap/#using-the-object-metadata-editor","text":"To launch the Metadata Editor, click on the Metadata button. For editing object metadata, you need to provide a specific name, namespace, annotations, labels, cluster name, generate name, and finalizers to uniquely identify the object.","title":"Using the Object Metadata Editor"},{"location":"tutorials/how-to-create-and-edit-configmap/#name","text":"Step 1: Enter the specific key name in the name field to give a unique identity to the object. Note: The name of the ConfigMap must be unique within a namespace.","title":"Name"},{"location":"tutorials/how-to-create-and-edit-configmap/#namespace","text":"Step 1: Enter namespace in the namespace field to organize clusters into virtual sub-clusters. Note: Provide a unique namespace within the ConfigMap. If left empty, the default namespace value shall be assigned automatically.","title":"Namespace"},{"location":"tutorials/how-to-create-and-edit-configmap/#annotations","text":"Step 1: Click on the Add Item button to create the new key-value field for annotations. Step 2: Enter the arbitrary metadata in key-value pair fields. Note: You can also edit the existing arbitrary metadata data in the fields.","title":"Annotations"},{"location":"tutorials/how-to-create-and-edit-configmap/#labels","text":"Step 1: Click on Add Item button to create the new key-value field for labels. Step 2: Enter the label's details in the key-value pair field. Note: You also can edit existing label data in the fields.","title":"Labels"},{"location":"tutorials/how-to-create-and-edit-configmap/#cluster-name","text":"Enter the name of the cluster in the Cluster Name field to which the object belongs.","title":"Cluster Name"},{"location":"tutorials/how-to-create-and-edit-configmap/#generate-name","text":"Enter a prefix in the Generate Name field. Note: You can also edit the existing data in the Generate Name field.","title":"Generate Name"},{"location":"tutorials/how-to-create-and-edit-configmap/#finalizers","text":"Step 1: Click on the Add Item button to create the new finalizer field. Step 2: Enter the finalizer in the finalizers field. Note: You also can edit the existing data in the finalizer fields. Kubernetes is prompted to wait until specific conditions are met before it fully deletes resources marked for deletion. Note: Finalizer must be empty before the object is deleted from the registry. The source editor provides autocomplete and autosave options to automatically save your edits.","title":"Finalizers"},{"location":"tutorials/how-to-create-and-edit-configmap/#questions-or-comments","text":"Please feel free to join our open source community on Discord with this Invite Link and start your discussion.","title":"Questions or Comments?"},{"location":"tutorials/how-to-fix-broken-links/","text":"How to Fix Broken Links In this Monokle tutorial, we will illustrate the steps to fix broken links. Let\u2019s get started! 1. Launch Monokle Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Launch Monokle and, on the welcome screen, there are three options to start working with projects: Select an exisiting folder. Create an empty project. Start from a template. Click Select an existing project to add your project folder containing K8 resources. 2. Select Folder Select your folder to parse its manifest in the file explorer. In the file explorer, you can view manifests, including their resources, and their relationships. 3. Navigate Resource Manifests Scroll up & down to navigate and select the required manifests. Once you select a manifest, its related resources will be highlighted automatically in the navigator. 4. Find Broken Links Scroll down in the navigator and hover over a resource link with a warning signal. Note: The link with a warning signal indicates that the link is broken. 5. Click on the Broken Link Click on the link provided in the tooltip. Note: The source code for the specific resource will be highlighted automatically in the editor. 6. Update the link in the source editor Manually update the name of the highlighted dead endpoint with a working endpoint to fix the broken link. Note: The warning triangle will automatically go away once a valid link is provided. Questions or Comments? Please feel free to join our open source community on Discord with this Invite Link and start your discussion.","title":"How to Fix Broken Links"},{"location":"tutorials/how-to-fix-broken-links/#how-to-fix-broken-links","text":"In this Monokle tutorial, we will illustrate the steps to fix broken links. Let\u2019s get started!","title":"How to Fix Broken Links"},{"location":"tutorials/how-to-fix-broken-links/#1-launch-monokle","text":"Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Launch Monokle and, on the welcome screen, there are three options to start working with projects: Select an exisiting folder. Create an empty project. Start from a template. Click Select an existing project to add your project folder containing K8 resources.","title":"1. Launch Monokle"},{"location":"tutorials/how-to-fix-broken-links/#2-select-folder","text":"Select your folder to parse its manifest in the file explorer. In the file explorer, you can view manifests, including their resources, and their relationships.","title":"2. Select Folder"},{"location":"tutorials/how-to-fix-broken-links/#3-navigate-resource-manifests","text":"Scroll up & down to navigate and select the required manifests. Once you select a manifest, its related resources will be highlighted automatically in the navigator.","title":"3. Navigate Resource Manifests"},{"location":"tutorials/how-to-fix-broken-links/#4-find-broken-links","text":"Scroll down in the navigator and hover over a resource link with a warning signal. Note: The link with a warning signal indicates that the link is broken.","title":"4. Find Broken Links"},{"location":"tutorials/how-to-fix-broken-links/#5-click-on-the-broken-link","text":"Click on the link provided in the tooltip. Note: The source code for the specific resource will be highlighted automatically in the editor.","title":"5. Click on the Broken Link"},{"location":"tutorials/how-to-fix-broken-links/#6-update-the-link-in-the-source-editor","text":"Manually update the name of the highlighted dead endpoint with a working endpoint to fix the broken link. Note: The warning triangle will automatically go away once a valid link is provided.","title":"6. Update the link in the source editor"},{"location":"tutorials/how-to-fix-broken-links/#questions-or-comments","text":"Please feel free to join our open source community on Discord with this Invite Link and start your discussion.","title":"Questions or Comments?"},{"location":"tutorials/how-to-navigate-and-edit-manifests/","text":"How to Work with Manifests In this Monokle tutorial, we will illustrate the steps to help you navigate K8s resources and edit their manifests. Let\u2019s get started! 1. Launch Monokle Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Launch Monokle and, on the welcome screen, there are three option to start working with projects: Select an exisiting folder. Create an empty project. Start from a template. Click Select an existing project to add your project folder containing K8 resources. 2. Select Folder Select your folder to parse its manifest in the file explorer. In the file explorer, you can view manifests, including their resources, and their relationships. 3. Navigate Resource Manifests Scroll up & down to navigate and select the required manifests. Once you select a manifest, its related resources will be highlighted automatically in the navigator. See Resource Navigation for more information on how to navigate resources. 4. Navigate resource links Click on outgoing and incoming links to navigate the corresponding resources. The warning triangle reflects that the link refers to broken resource links - see Resource Links 5. Select Required Resource Select the required resource in the Navigator. Once you select a resource, its source code will be launched and highlighted in the editor. Now you can edit the resource in the editor and any changes you make will be automatically saved. See Resource Editing for more information on how to edit resources. 6. Edit a Resource Right-click on the editor to launch the editing menu. The editing menu includes the following options: Go to Symbols: Select the Go to Symbol option to perform a focused search of code for finding specified symbols quickly. Change All occurrences: Select the Change All Occurrences option to replace all string occurrences in the code with any other regular expression. Format Document: Select the Format Document option to organize the source code for better readability. It addresses font size, spacing, margins, alignment, columns, indentation, and lists. Cut: Select the Cut option to delete the unnecessary data. After you cut the text, it gets stored in the clipboard so you can use it later. Copy: Select the Copy option to copy a piece of code and reuse the code to save development time. Paste: Select the Paste option to paste a piece of code. This reduces the repetition of efforts required to write and test code. Command Palette: Select the Command Palette option to access keyboard shortcuts quickly for the most common operations. Note: The editor provides autocomplete and autosave options. Questions or Comments? Please feel free to join our open source community on Discord with this Invite Link and start your discussion.","title":"How to Work with Manifests"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#how-to-work-with-manifests","text":"In this Monokle tutorial, we will illustrate the steps to help you navigate K8s resources and edit their manifests. Let\u2019s get started!","title":"How to Work with Manifests"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#1-launch-monokle","text":"Note: Please follow this Getting Started guide to install Monokle \ud83d\ude80 Launch Monokle and, on the welcome screen, there are three option to start working with projects: Select an exisiting folder. Create an empty project. Start from a template. Click Select an existing project to add your project folder containing K8 resources.","title":"1. Launch Monokle"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#2-select-folder","text":"Select your folder to parse its manifest in the file explorer. In the file explorer, you can view manifests, including their resources, and their relationships.","title":"2. Select Folder"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#3-navigate-resource-manifests","text":"Scroll up & down to navigate and select the required manifests. Once you select a manifest, its related resources will be highlighted automatically in the navigator. See Resource Navigation for more information on how to navigate resources.","title":"3. Navigate Resource Manifests"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#4-navigate-resource-links","text":"Click on outgoing and incoming links to navigate the corresponding resources. The warning triangle reflects that the link refers to broken resource links - see Resource Links","title":"4. Navigate resource links"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#5-select-required-resource","text":"Select the required resource in the Navigator. Once you select a resource, its source code will be launched and highlighted in the editor. Now you can edit the resource in the editor and any changes you make will be automatically saved. See Resource Editing for more information on how to edit resources.","title":"5. Select Required Resource"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#6-edit-a-resource","text":"Right-click on the editor to launch the editing menu. The editing menu includes the following options: Go to Symbols: Select the Go to Symbol option to perform a focused search of code for finding specified symbols quickly. Change All occurrences: Select the Change All Occurrences option to replace all string occurrences in the code with any other regular expression. Format Document: Select the Format Document option to organize the source code for better readability. It addresses font size, spacing, margins, alignment, columns, indentation, and lists. Cut: Select the Cut option to delete the unnecessary data. After you cut the text, it gets stored in the clipboard so you can use it later. Copy: Select the Copy option to copy a piece of code and reuse the code to save development time. Paste: Select the Paste option to paste a piece of code. This reduces the repetition of efforts required to write and test code. Command Palette: Select the Command Palette option to access keyboard shortcuts quickly for the most common operations. Note: The editor provides autocomplete and autosave options.","title":"6. Edit a Resource"},{"location":"tutorials/how-to-navigate-and-edit-manifests/#questions-or-comments","text":"Please feel free to join our open source community on Discord with this Invite Link and start your discussion.","title":"Questions or Comments?"}]}